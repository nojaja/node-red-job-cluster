[
    {
        "id": "f01882c08732b397",
        "type": "tab",
        "label": "WORKER_Control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dbd8abb392121dc1",
        "type": "tab",
        "label": "JOBCTL_管理用",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cd185f8f533e0f2d",
        "type": "subflow",
        "name": "logger",
        "info": "サイドバーの「デバッグ」タブに、選択したメッセージプロパティの値を表示します。\r\n設定により、ランタイムログへの出力も可能です。\r\nデフォルトの表示対象は`msg.payload`ですが、設定により、指定したプロパティ、メッセージ全体、もしくは、JSONata式の評価結果を出力できます。\r\n\r\n## 詳細\r\n「デバッグ」サイドバーは受け取ったメッセージの階層構造を表示する機能を備えます。この機能によりメッセージの構造を容易に理解できます。\r\n\r\nJavaScriptオブジェクトと配列は必要に応じて折り畳んだり展開したりできます。バッファオブジェクトを生データとして表示したり、表現可能な場合に文字列として表示したりすることも可能です。\r\n\r\nメッセージを受信した時刻、送信ノード、メッセージの型に関する情報を「デバッグ」サイドバーに表示されたメッセージに付随して表示します。送信元ノードのIDを選択すると、ワークスペース内の対応ノードを確認できます。\r\n\r\n出力の有効/無効はノード上のボタンで切り替えられます。フロー上で未使用のdebugノードは、無効化するか削除することを推奨します。\r\n\r\n全てのメッセージをランタイムログに送付、もしくは、(32文字の)短いデータをdebugノードの下のステータステキストに表示することも可能です。",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "042f911e82caee52"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 20,
                "wires": [
                    {
                        "id": "8b05743651ac39ce",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "logLevel",
                "type": "str",
                "value": "info"
            },
            {
                "name": "logName",
                "type": "str",
                "value": "system"
            },
            {
                "name": "logPath",
                "type": "env",
                "value": "LOGPATH"
            },
            {
                "name": "removeColor",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "outputMsgObject",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-logger",
            "type": "job-cluster-logger",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#87A980",
        "icon": "node-red/file-out.svg"
    },
    {
        "id": "27227cef106a74f0",
        "type": "subflow",
        "name": "topic add endpoint",
        "info": "workerから新規topicの受信に利用\r\n\r\n## **description**\r\ntopic情報を受取処理リストに追加します。  \r\n\r\n## **env**\r\n- **HOSTNAME**: 自分のホスト名を定義 \r\n- **NODE_RED_VERSION**:自分のNODE-REDのVERSIONを指定します   \r\n\r\n## **global**\r\nなし\r\n\r\n## **properties**\r\n- **actionType**: \"addtopic\"  \r\n\r\n## **data structure**\r\nなし\r\n\r\n## **input msg**\r\nなし\r\n\r\n## **output msg**\r\n- **msg.topic**: 受け取ったtopicをJSON.parseして返却します  \r\n例\r\n ```\r\n {\r\n    \"topic\" : \"topic1\",\r\n    \"param\": {\r\n        \"hoge\": \"new\",\r\n        \"jobsession\": $millis()\r\n        }\r\n}\r\n ```\r\n\r\n## Receive Request\r\nGET  \r\n`/${actionType}/:topic`  \r\n\r\n## Receive Request header\r\nx-topic:   \r\nx-cluster_service_uid: 呼び出し元のUUID\r\n\r\n## data\r\ntopic: encodeURIComponent(JSON.stringify({\r\n    \"topic\" : \"topic1\",\r\n    \"param\": {\r\n        \"hoge\": \"new\",\r\n        \"jobsession\": $millis()\r\n        }\r\n}))\r\n\r\n\r\n## Receive Response\r\nJSON形式\r\n{\r\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\r\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\r\n    \"topic\": msg.topic\r\n}\r\n\r\n## output\r\n msg.topic = JSON.parse(msg.topic)\r\n ```\r\n {\r\n    \"topic\" : \"topic1\",\r\n    \"param\": {\r\n        \"hoge\": \"new\",\r\n        \"jobsession\": $millis()\r\n        }\r\n}\r\n ```",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 780,
                "y": 120,
                "wires": [
                    {
                        "id": "2be49eb745fa791d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "actionType",
                "type": "str",
                "value": "exec"
            },
            {
                "name": "endpoint",
                "type": "env",
                "value": "/${actionType}/:topic",
                "ui": {
                    "type": "hide"
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-endpoint",
            "type": "job-cluster-endpoint",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "45018afdb676ae24",
        "type": "subflow",
        "name": "rpc-async",
        "info": "WebAPIをコールバック式の非同期でコールします\r\n\r\n## **description**\r\ntask execなどローカル内での呼び出しに利用  \r\n\r\nこのWebAPIでは双方向のWebAPIコールによって実現します  \r\nしたがって双方でendpointが公開可能な環境向けとしてlocalhost内でのみ動作します  \r\n\r\nこの処理によってWebAPIをコールすると相手には、コールバック用のURLが通知されます  \r\n相手は受け取ったコールバックURLにアクセスすることによって処理が完了します  \r\n\r\n## **env**\r\n- **HOSTNAME**: 自分のホスト名を定義 \r\n- **PORT**: 自分のポートを定義 \r\n- **NODE_RED_VERSION**:自分のNODE-REDのVERSIONを指定します   \r\n\r\n## **global**\r\nなし\r\n\r\n## **properties**\r\n- **actionType**: 処理の種別を指定します \r\n- **topicTicket_key**: msg直下のtopicTicketのkey名を指定します  \r\n- **endpointport**: 呼び出し先のポートを定義します \r\n\r\n## **data structure**\r\n- **topicTicket**: json形式の下記を含んだ構造体\r\n```\r\ntopicTicket = {\r\n    topic: topicName,\r\n    uuid: RED.util.procuuid //クライアントのUUID\r\n}\r\n\r\n```\r\n\r\n## **Send Request**\r\nGET  \r\n`http://localhost:${endpointport}/${actionType}/${topicTicket}`  \r\ntopicTicketはJSON.stringify()された文字列  \r\n\r\n## **Send Request header**\r\n- **x-callback**:  \r\n```\r\nhttp://localhost:${PORT}/callback/${topicTicket.topic}/${topicTicket.uuid}\r\n```\r\n\r\n## **Send Response**\r\nJSON形式として\r\n```\r\n{\r\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\r\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\r\n    \"topicTicket\": msg.topicTicket,\r\n    \"callbackhost\": msg.callbackhost\r\n}\r\n```\r\nといった内容を期待します。  \r\n受信データは\r\n```\r\nmsg.payload = JSON.parse(msg.payload)\r\n```\r\nを行います\r\n\r\n## **Receive Request**\r\nx-callbackで送信したURLで待機します。  \r\nGET  \r\n`http://localhost:${port}/callback/${topic}/${uuid}`  \r\n結果の精査は特に行いません。\r\n\r\n## **Receive Request header**\r\nなし\r\n\r\n## **Receive Response**\r\nJSON形式で下記を返却します\r\n```\r\n{\r\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\r\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\r\n    \"topic\": msg.topic,\r\n    \"uuid\": msg.uuid\r\n}\r\n```\r\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "a9fa9c32d27f7f10"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 320,
                "wires": [
                    {
                        "id": "194d7930b95721c2",
                        "port": 0
                    }
                ]
            },
            {
                "x": 820,
                "y": 120,
                "wires": [
                    {
                        "id": "b861d902d0337a8d",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "actionType",
                "type": "str",
                "value": "exec"
            },
            {
                "name": "callback_endpoint",
                "type": "str",
                "value": "/callback/:topic/:uuid",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "endpointport",
                "type": "str",
                "value": "1880"
            },
            {
                "name": "topicTicket_key",
                "type": "str",
                "value": "topicTicket"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-rpc-async",
            "type": "job-cluster-rpc-async",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "outputLabels": [
            "OK",
            "NG"
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "b3da594ab22fa515",
        "type": "subflow",
        "name": "switch-role",
        "info": "ノードの役割判定\r\n\r\n## **env**\r\n- **CLUSTER_ROLE**: ノードの役割設定、jobctlかworkerを指定します  \r\n\r\n## **global**\r\nなし\r\n\r\n## **properties**\r\nなし  \r\n\r\n## **input msg**\r\nそのままoutputされます。\r\n\r\n## **output msg**\r\njobctlの場合はoutput1  \r\nworkerの場合はoutput2  \r\nに出力されます。\r\n",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "2ca89985ea3eb86d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 370,
                "y": 40,
                "wires": [
                    {
                        "id": "2ca89985ea3eb86d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 380,
                "y": 120,
                "wires": [
                    {
                        "id": "2ca89985ea3eb86d",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-contrib-job-cluster-switch-role",
            "type": "job-cluster-switch-role",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#E2D96E",
        "outputLabels": [
            "jobctl",
            "worker"
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "375ee1d6cf6e3891",
        "type": "subflow",
        "name": "rpc-sync",
        "info": "WebAPIを同期型でコールします\r\n\r\n\r\n## **description**\r\nJOBCTL_HOSTに対して、jsonデータ付きのURLでRequestします。  \r\nJOBCTL_HOSTは受信に成功するとjson形式のデータをResponseとして返却します\r\n\r\n接続に失敗するとJOBCTL_HOSTを削除します。  \r\n\r\n## **env**\r\nなし \r\n\r\n## **global**\r\n- **JOBCTL_HOST**: 検出されたジョブコントローラのホスト情報  \r\n\r\n## **properties**\r\n- **actionType**: 処理の種別を指定します \r\n- **topicTicketPath**: msg配下のtopicTicketの場所を指定します  \r\n \r\n## data structure\r\n- **topicTicket**: json形式の任意の構造体\r\n\r\naddtopicの場合の例\r\n```\r\ntopic: topicName\r\nparam: {\r\n    target: target\r\n    jobsession: \r\n}\r\n```\r\n\r\n## **input msg**\r\nそのままoutputされます。\r\n\r\n## **output msg**\r\nFLOW_MAXより小さいの場合はoutput1  \r\nFLOW_MAX以上の場合はoutput2  \r\nに出力されます。\r\n\r\n## Send Request\r\nGET \r\n```\r\nhttp://${JOBCTL_SERVICE_IP}:${JOBCTL_SERVICE_HOST_HTTP_PORT}/${actionType}/${topicTicket}  \r\n```\r\ntopicTicketはencodeURIComponent(JSON.stringify())された文字列  \r\n\r\n## Send Request header\r\n- **x-topic**: topicTicketと同じ\r\n- **x-cluster_service_uid**: クライアントのUUID\r\n\r\n## Send Response\r\nJSON形式として\r\n```\r\nmsg.payload = JSON.parse(msg.payload)\r\n```\r\nを行います\r\n",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "a72d2803344a446d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 40,
                "wires": [
                    {
                        "id": "ab5c9b3893934684",
                        "port": 0
                    }
                ]
            },
            {
                "x": 820,
                "y": 100,
                "wires": [
                    {
                        "id": "ab5c9b3893934684",
                        "port": 1
                    },
                    {
                        "id": "a72d2803344a446d",
                        "port": 1
                    },
                    {
                        "id": "7ef01344844389b8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "actionType",
                "type": "str",
                "value": "exec"
            },
            {
                "name": "topicTicketPath",
                "type": "str",
                "value": "topicTicket"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-rpc-sync",
            "type": "job-cluster-rpc-sync",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "c826488602403262",
        "type": "subflow",
        "name": "assign-topics",
        "info": "",
        "category": "Topic Control",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "18819cbac00ebaf8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 40,
                "wires": [
                    {
                        "id": "18819cbac00ebaf8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 380,
                "y": 100,
                "wires": [
                    {
                        "id": "18819cbac00ebaf8",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicPath",
                "type": "str",
                "value": "topic"
            },
            {
                "name": "statusPath",
                "type": "str",
                "value": "status"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-assign-topics",
            "type": "job-cluster-assign-topics",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DEB887",
        "icon": "node-red/db.svg"
    },
    {
        "id": "b8cfb4b94405d94d",
        "type": "subflow",
        "name": "pickup-topic",
        "info": "TOPICSを返却\r\n\r\n## **description**\r\n環境変数TOPICSに設定した値をround robin式で返却します\r\n\r\n## **env**\r\n- **TOPICS**: 取得するtopicの設定、複数ある場合は,区切りで定義します。\r\n\r\n## **global**\r\n- **TARGET_TOPICS_NO**: round robinの添字管理に利用します\r\n\r\n## **properties**\r\nなし  \r\n\r\n## **input msg**\r\nなし\r\n\r\n## **output msg**\r\nmsg.topicが上書きされます。\r\n```\r\nmsg = { .... ,\r\n        topic: topicName \r\n    }\r\n```",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "9824a4787a5aa8d6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "9824a4787a5aa8d6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-contrib-job-cluster-pickup-topic",
            "type": "job-cluster-pickup-topic",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#E2D96E",
        "icon": "node-red/rbe.png"
    },
    {
        "id": "d6f01b04a12d7282",
        "type": "subflow",
        "name": "topic-add",
        "info": "",
        "category": "Topic Control",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "a27285317db43ec7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "a27285317db43ec7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicPath",
                "type": "str",
                "value": "payload.topic"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-topic-add",
            "type": "job-cluster-topic-add",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DEB887",
        "icon": "node-red/db.svg"
    },
    {
        "id": "0eb6c089a1f171e9",
        "type": "subflow",
        "name": "listup-topics",
        "info": "",
        "category": "Topic Control",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "126cbf276ed23332"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "126cbf276ed23332",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "statusPath",
                "type": "str",
                "value": "status"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-listup-topics",
            "type": "job-cluster-listup-topics",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DEB887",
        "icon": "node-red/db.svg"
    },
    {
        "id": "f5ba2b0f4e9255e0",
        "type": "subflow",
        "name": "update-topics",
        "info": "",
        "category": "Topic Control",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "df88c0ce3abe7f11"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 40,
                "wires": [
                    {
                        "id": "df88c0ce3abe7f11",
                        "port": 0
                    }
                ]
            },
            {
                "x": 380,
                "y": 100,
                "wires": [
                    {
                        "id": "df88c0ce3abe7f11",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicPath",
                "type": "str",
                "value": "topic"
            },
            {
                "name": "statusPath",
                "type": "str",
                "value": "status"
            },
            {
                "name": "uuidPath",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-update-topics",
            "type": "job-cluster-update-topics",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DEB887",
        "icon": "node-red/db.svg"
    },
    {
        "id": "1f63a3ba2a6337e6",
        "type": "subflow",
        "name": "add-waitlist",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "998fa97d665f6910"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "998fa97d665f6910",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicNamePath",
                "type": "str",
                "value": "payload.PAYLOAD.topic"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-add-waitlist",
            "type": "job-cluster-add-waitlist",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DEB887",
        "icon": "node-red/db.svg"
    },
    {
        "id": "f1b787faf67b8960",
        "type": "subflow",
        "name": "assign-waitlist",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "2e548032e1145bc9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "2e548032e1145bc9",
                        "port": 0
                    }
                ]
            },
            {
                "x": 360,
                "y": 120,
                "wires": [
                    {
                        "id": "2e548032e1145bc9",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-contrib-job-cluster-assign-waitlist",
            "type": "job-cluster-assign-waitlist",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DEB887",
        "icon": "node-red/db.svg"
    },
    {
        "id": "b1626fc28a971f31",
        "type": "subflow",
        "name": "split-array",
        "info": "リストを分解して、後続に送ります\r\n\r\n## **description**\r\n\r\n\r\n## **env**\r\nなし \r\n\r\n## **global**\r\nなし  \r\n\r\n## **properties**\r\n- **inputArrayPath**: msg配下の対象のArrayの場所を指定します \r\n- **outputPath**: 分解した要素を格納するmsg配下の場所を指定します \r\n \r\n## data structure\r\nなし \r\n\r\n## **input msg**\r\nなし\r\n\r\n## **output msg**\r\noutputPathで指定した場所に要素が追加されます。\r\n",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "210c38446e598771"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "210c38446e598771",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "inputArrayPath",
                "type": "str",
                "value": "payload.list"
            },
            {
                "name": "outputPath",
                "type": "str",
                "value": "payload.topic"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-split-array",
            "type": "job-cluster-split-array",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#E2D96E",
        "icon": "node-red/split.svg"
    },
    {
        "id": "7157de4597b60201",
        "type": "subflow",
        "name": "flow-limit",
        "info": "同時実行数を制限します\r\n\r\n## **description**\r\nFLOW_STATUSはflow-startによって追加され、flow-endによって削除されます。\r\n\r\n## **env**\r\nなし\r\n\r\n## **global**\r\n- **FLOW_STATUS**: 現在実行中のフローステータスを管理します  \r\n- **FLOW_MAX**: 同時実行の最大数を指定します  \r\n\r\n## **properties**\r\nなし  \r\n\r\n## **input msg**\r\nそのままoutputされます。\r\n\r\n## **output msg**\r\nFLOW_MAXより小さいの場合はoutput1  \r\nFLOW_MAX以上の場合はoutput2  \r\nに出力されます。\r\n",
        "category": "Rate Control",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "b19fa56a77429a44"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 40,
                "wires": [
                    {
                        "id": "b19fa56a77429a44",
                        "port": 0
                    }
                ]
            },
            {
                "x": 340,
                "y": 100,
                "wires": [
                    {
                        "id": "b19fa56a77429a44",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-contrib-job-cluster-flow-limit",
            "type": "job-cluster-flow-limit",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#E6E0F8",
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "f6c57fcec804269c",
        "type": "subflow",
        "name": "flow-start",
        "info": "topicの処理ステータスを実行状態にします。\r\n\r\n## **description**\r\nFLOW_STATUSを作成します\r\n\r\n## **env**\r\nなし \r\n\r\n## **global**\r\n- **FLOW_STATUS**: topicの処理ステータス管理\r\n\r\n## **properties**\r\nなし\r\n\r\n## data structure\r\n- **topicTicket**: topic情報は下記の構造を期待します\r\n```\r\n{\r\n    topic: topicName,\r\n    uuid: UUID\r\n}\r\n```\r\n\r\n## **input msg**\r\n- **msg.payload.topicTicket**: topic情報\r\n\r\n## **output msg**\r\n- **msg.topicTicket**: topic情報\r\n- **msg.topic**: topic名\r\n- **msg.uuid**: topicのUUID",
        "category": "Rate Control",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "e0410ad4c1884406"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 60,
                "wires": [
                    {
                        "id": "e0410ad4c1884406",
                        "port": 0
                    }
                ]
            },
            {
                "x": 340,
                "y": 100,
                "wires": [
                    {
                        "id": "e0410ad4c1884406",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-contrib-job-cluster-flow-start",
            "type": "job-cluster-flow-start",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#E6E0F8",
        "icon": "node-red/inject.svg"
    },
    {
        "id": "e9700f935181888e",
        "type": "subflow",
        "name": "flow-end",
        "info": "topicの処理ステータスを削除にします。\r\n\r\n## **description**\r\n対象uuidのFLOW_STATUSを削除します。\r\n\r\n## **env**\r\nなし \r\n\r\n## **global**\r\n- **FLOW_STATUS**: topicの処理ステータス管理\r\n\r\n## **properties**\r\n- **uuidPath**: msg配下のuuidの格納されている場所を指定\r\n\r\n## data structure\r\nなし\r\n\r\n## **input msg**\r\nなし\r\n\r\n## **output msg**\r\n成功した場合はoutput1  \r\n失敗した場合はoutput2  \r\nに出力します",
        "category": "Rate Control",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "f2b282801e277ec6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "f2b282801e277ec6",
                        "port": 0
                    }
                ]
            },
            {
                "x": 340,
                "y": 120,
                "wires": [
                    {
                        "id": "f2b282801e277ec6",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "uuidPath",
                "type": "str",
                "value": "uuid"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-flow-end",
            "type": "job-cluster-flow-end",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#E6E0F8",
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "131075747e8871f8",
        "type": "subflow",
        "name": "worker-start",
        "info": "topicを取得して処理を開始します。\r\n\r\n## **description**\r\nJOBCTL_HOSTからtopicを取得して、後続処理にパラメータtopicTicketを返す。\r\n\r\n## **env**\r\n- **CLUSTER_ROLE**: ノードの役割設定、workerの場合のみ機能します。  \r\n- **TOPICS**: 取得するtopicの設定、複数ある場合は`,`区切りで定義します。  \r\n\r\n## **global**\r\n- **JOBCTL_HOST**: 検出されたジョブコントローラのホスト情報  \r\n- **FLOW_STATUS**: flow-limitの現在実行中のフローステータスを管理します\r\n- **FLOW_MAX**: flow-limitの同時実行の最大数を指定します\r\n- **TARGET_TOPICS_NO**: pickup-topicのround robinの添字管理に利用します\r\n\r\n\r\n## **properties**\r\nなし  \r\n\r\n## **data structure**\r\ntopicTicketは下記の構造を含むjson形式になっている必要があります。 \r\n```\r\n{\r\n    topic: topicName,\r\n    uuid: UUID\r\n}\r\n```\r\n## **input msg**\r\nなし\r\n\r\n## **output msg**\r\n- **msg.topic**: topicNameで上書きされます\r\n- **msg.payload**: get topic Responseで上書きされます\r\n- **msg.payload.topicTicket**: 下記の構造を含んだtopic情報\r\n```\r\n{\r\n    \"topic\" : \"topic1\",\r\n    \"param\": {\r\n        \"jobsession\": UUID\r\n        }\r\n}\r\n```\r\n\r\n## **get topic Request**\r\nGET  \r\n`http://${JOBCTL_SERVICE_IP}:${JOBCTL_SERVICE_HOST_HTTP_PORT}/assign/${msg.topic}`\r\n\r\ntopicTicketはencodeURIComponent(JSON.stringify())された文字列  \r\n\r\n## **get topic Request header**\r\n- **x-topic**: topicTicketと同じ\r\n- **x-cluster_service_uid**: クライアントのUUID\r\n\r\n## **get topic Response**\r\n下記のJSON形式データを期待します\r\n```\r\n{\r\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\r\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\r\n    \"topic\": msg.payload.topic,\r\n    \"topicTicket\": {\r\n        \"topic\" : \"topic1\",\r\n        \"param\": {\r\n            \"jobsession\": $millis()\r\n            }\r\n    }\r\n}\r\n```\r\n\r\n\r\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 160,
                "wires": [
                    {
                        "id": "60ccecf9024cc129"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 60,
                "wires": [
                    {
                        "id": "bd61d5cefb666280",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1040,
                "y": 180,
                "wires": [
                    {
                        "id": "006e9d528f47ee98",
                        "port": 1
                    },
                    {
                        "id": "ca70b65374e24ae8",
                        "port": 1
                    },
                    {
                        "id": "bd61d5cefb666280",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-contrib-job-cluster-worker-start",
            "type": "job-cluster-worker-start",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DDAA99",
        "icon": "font-awesome/fa-flash"
    },
    {
        "id": "1ec11fe81fee736c",
        "type": "subflow",
        "name": "worker-end",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "82c3b0b299dbe8a3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 60,
                "wires": [
                    {
                        "id": "707bc717a0d8c626",
                        "port": 0
                    }
                ]
            },
            {
                "x": 820,
                "y": 160,
                "wires": [
                    {
                        "id": "707bc717a0d8c626",
                        "port": 1
                    },
                    {
                        "id": "de4e7c1a54204bc7",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicPath",
                "type": "str",
                "value": "topic"
            },
            {
                "name": "uuidPath",
                "type": "str",
                "value": "uuid"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-worker-end",
            "type": "job-cluster-worker-end",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DDAA99",
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "6399b4d8775a079a",
        "type": "subflow",
        "name": "jobctl",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1020,
                "y": 360,
                "wires": [
                    {
                        "id": "18bb4c3128c497d0",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1260,
                "y": 860,
                "wires": [
                    {
                        "id": "fa378d358dbc8c4f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "WORKER_EXPIRY",
                "type": "num",
                "value": "5",
                "ui": {
                    "label": {
                        "ja": "有効期限(min)"
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-jobctl",
            "type": "job-cluster-jobctl",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DDAA99",
        "icon": "font-awesome/fa-flash"
    },
    {
        "id": "4d4915ce082a1010",
        "type": "subflow",
        "name": "workerctl",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 260,
                "wires": [
                    {
                        "id": "f51a42a80aaef931"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1400,
                "y": 260,
                "wires": [
                    {
                        "id": "735c659f87d1681c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1400,
                "y": 320,
                "wires": [
                    {
                        "id": "735c659f87d1681c",
                        "port": 1
                    },
                    {
                        "id": "eab7eab5a63d561b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-contrib-job-cluster-workerctl",
            "type": "job-cluster-workerctl",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DDAA99",
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "2d6a615a0f89e919",
        "type": "subflow",
        "name": "set-jobsession",
        "info": "jobsessionを生成します。\r\n\r\n## **description**\r\nyyyymmdd形式のIDを生成します。\r\n\r\n## **env**\r\nなし \r\n\r\n## **global**\r\nなし  \r\n\r\n## **properties**\r\nなし \r\n \r\n## data structure\r\nなし \r\n\r\n## **input msg**\r\nなし\r\n\r\n## **output msg**\r\n`msg.topicTicket.param.jobsession`にIDが追加されます。\r\n",
        "category": "Topic Control",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "771e91fbd62fd669"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "771e91fbd62fd669",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DEB887",
        "icon": "font-awesome/fa-plus-circle"
    },
    {
        "id": "8b05743651ac39ce",
        "type": "function",
        "z": "cd185f8f533e0f2d",
        "name": "logger_proc",
        "func": "//const uid_key = env.get(\"logUID_Key\")\n//const uid = msg[uid_key] || msg._msgid\nconst date = new Date()\nconst uid = date.getFullYear() + (\"0\" + (date.getMonth() + 1)).slice(-2) + (\"0\" + (date.getDate())).slice(-2)\n\nconst logLevel = env.get(\"logLevel\")\nconst logName = env.get(\"logName\")\nconst logPath = env.get(\"logPath\")\nconst filename = `${logName}${logLevel}.log`\nmsg.logFilePath = path.join(logPath, uid, filename)\n\nconst outputMsgObject = env.get(\"outputMsgObject\")\nconst msg2 = RED.util.cloneMessage(msg)\nif (outputMsgObject) {\n    msg2.payload = JSON.stringify(msg);\n}\n//node.name = logName\n//if (logLevel == \"info\") node.warn(msg.consoleout)\n//if (logLevel == \"warn\") node.warn(msg.consoleout)\n//if (logLevel == \"error\") node.error(msg.consoleout)\nreturn [msg, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 530,
        "y": 40,
        "wires": [
            [],
            [
                "5dfac259ecc0927f",
                "7e0a41b86051ec87"
            ]
        ]
    },
    {
        "id": "5dfac259ecc0927f",
        "type": "file",
        "z": "cd185f8f533e0f2d",
        "name": "logout",
        "filename": "logFilePath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 750,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7e0a41b86051ec87",
        "type": "debug",
        "z": "cd185f8f533e0f2d",
        "name": "${logName}",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 140,
        "wires": []
    },
    {
        "id": "042f911e82caee52",
        "type": "switch",
        "z": "cd185f8f533e0f2d",
        "name": "",
        "property": "removeColor",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 40,
        "wires": [
            [
                "75c9a4d2d9c4eb9f"
            ],
            [
                "8b05743651ac39ce"
            ]
        ]
    },
    {
        "id": "75c9a4d2d9c4eb9f",
        "type": "function",
        "z": "cd185f8f533e0f2d",
        "name": "remove Color",
        "func": "const regex = /\\x1b[[0-9;]*m/g\nconst buf = (typeof msg.payload === 'object') ? msg.payload.toString() : msg.payload\nmsg.payload = buf.replace(regex, '')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 20,
        "wires": [
            [
                "8b05743651ac39ce"
            ]
        ]
    },
    {
        "id": "ab279f5f2fd77d53",
        "type": "http in",
        "z": "27227cef106a74f0",
        "name": "endpoint",
        "url": "${endpoint}",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "87bd2ef55c481975"
            ]
        ]
    },
    {
        "id": "b2cb43138961ea29",
        "type": "http response",
        "z": "27227cef106a74f0",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 980,
        "y": 60,
        "wires": []
    },
    {
        "id": "285f8f2fa8f0b214",
        "type": "function",
        "z": "27227cef106a74f0",
        "name": "assing result",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topic\": msg.topic,\n    \"callbackhost\": msg.callbackhost\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 60,
        "wires": [
            [
                "b2cb43138961ea29"
            ]
        ]
    },
    {
        "id": "2be49eb745fa791d",
        "type": "function",
        "z": "27227cef106a74f0",
        "name": "JSON.parse",
        "func": "if (msg.topic) {\n    try {\n        msg.topic = JSON.parse(msg.topic)\n    } catch (error) {\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 60,
        "wires": [
            [
                "285f8f2fa8f0b214"
            ]
        ]
    },
    {
        "id": "87bd2ef55c481975",
        "type": "change",
        "z": "27227cef106a74f0",
        "name": "set parameter",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "req.params.topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 60,
        "wires": [
            [
                "2be49eb745fa791d"
            ]
        ]
    },
    {
        "id": "fe5cdfa3977befd1",
        "type": "http in",
        "z": "45018afdb676ae24",
        "name": "endpoint",
        "url": "${callback_endpoint}",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "194d7930b95721c2"
            ]
        ]
    },
    {
        "id": "194d7930b95721c2",
        "type": "change",
        "z": "45018afdb676ae24",
        "name": "set parameter",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "req.params.topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "uuid",
                "pt": "msg",
                "to": "req.params.uuid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 220,
        "wires": [
            [
                "0b6095c8f7667216"
            ]
        ]
    },
    {
        "id": "410889c1e32a785c",
        "type": "http response",
        "z": "45018afdb676ae24",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 820,
        "y": 220,
        "wires": []
    },
    {
        "id": "a9fa9c32d27f7f10",
        "type": "function",
        "z": "45018afdb676ae24",
        "name": "generate_url",
        "func": "\nconst port = env.get(\"PORT\")\nconst endpointport = env.get(\"endpointport\")\n\nconst action = env.get(\"actionType\")\n\n//RED.util.getPropByPath(msg, topicPath)\nconst topicTicket_key = env.get(\"topicTicket_key\")\nconst topicTicket = msg[topicTicket_key]\n\nconst data = JSON.stringify(topicTicket)\nmsg.callbackurl = `http://localhost:${port}/callback/${topicTicket.topic}/${topicTicket.uuid}`\nmsg.joburl = `http://localhost:${endpointport}/${action}/${data}`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 100,
        "wires": [
            [
                "7479f711071af9bc"
            ]
        ]
    },
    {
        "id": "7479f711071af9bc",
        "type": "http request",
        "z": "45018afdb676ae24",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{joburl}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-callback",
                "valueType": "msg",
                "valueValue": "callbackurl"
            }
        ],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "457bf364e0336269",
                "b861d902d0337a8d"
            ]
        ]
    },
    {
        "id": "457bf364e0336269",
        "type": "subflow:cd185f8f533e0f2d",
        "z": "45018afdb676ae24",
        "name": "",
        "x": 650,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "0b6095c8f7667216",
        "type": "function",
        "z": "45018afdb676ae24",
        "name": "Response-Page",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topic\": msg.topic,\n    \"uuid\": msg.uuid\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 220,
        "wires": [
            [
                "410889c1e32a785c"
            ]
        ]
    },
    {
        "id": "b861d902d0337a8d",
        "type": "function",
        "z": "45018afdb676ae24",
        "name": "JSON.parse",
        "func": "if (msg.statusCode == \"200\") {\n    if (msg.payload) {\n        try {\n            msg.payload = JSON.parse(msg.payload)\n        } catch (error) {\n        }\n    }\n    return [msg, null]\n} else {\n\n}\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 100,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "2ca89985ea3eb86d",
        "type": "function",
        "z": "b3da594ab22fa515",
        "name": "switch role",
        "func": "const CLUSTER_ROLE = env.get(\"CLUSTER_ROLE\")\n//jobctl\nif (CLUSTER_ROLE === \"jobctl\") {\n    return [msg, null]\n} else {\n//worker\n    return [null, msg]\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 170,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a72d2803344a446d",
        "type": "function",
        "z": "375ee1d6cf6e3891",
        "name": "generate_url",
        "func": "\nconst JOBCTL_HOST = global.get(\"JOBCTL_HOST\")\nif (!JOBCTL_HOST) return [null,msg] \nconst JOBCTL_SERVICE_IP = JOBCTL_HOST.IP\nconst JOBCTL_SERVICE_HOST_HTTP_PORT = JOBCTL_HOST.HTTP_PORT\nconst actionType = env.get(\"actionType\")\n\nconst topicTicketPath = env.get(\"topicTicketPath\")\nconst topicTicket = encodeURIComponent(JSON.stringify(RED.util.getPropByPath(msg, topicTicketPath)))\n\nmsg.joburl = `http://${JOBCTL_SERVICE_IP}:${JOBCTL_SERVICE_HOST_HTTP_PORT}/${actionType}/${topicTicket}`\nmsg.topic = topicTicket\nmsg.cluster_service_uid = RED.util.procuuid\nreturn [msg,null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "fc01a190e21bcf85"
            ],
            []
        ]
    },
    {
        "id": "fc01a190e21bcf85",
        "type": "http request",
        "z": "375ee1d6cf6e3891",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{joburl}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-topic",
                "valueType": "msg",
                "valueValue": "topic"
            },
            {
                "keyType": "other",
                "keyValue": "x-cluster_service_uid",
                "valueType": "msg",
                "valueValue": "cluster_service_uid"
            }
        ],
        "x": 370,
        "y": 60,
        "wires": [
            [
                "ab5c9b3893934684"
            ]
        ]
    },
    {
        "id": "ab5c9b3893934684",
        "type": "function",
        "z": "375ee1d6cf6e3891",
        "name": "JSON.parse",
        "func": "if (msg.statusCode == \"200\") {\n    if (msg.payload) {\n        try {\n            msg.payload = JSON.parse(msg.payload)\n        } catch (error) {\n        }\n    }\n    return [msg, null]\n}else{\n\n}\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 60,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "dfe10eebe66029fe",
        "type": "catch",
        "z": "375ee1d6cf6e3891",
        "name": "",
        "scope": [
            "fc01a190e21bcf85"
        ],
        "uncaught": false,
        "x": 390,
        "y": 160,
        "wires": [
            [
                "7ef01344844389b8"
            ]
        ]
    },
    {
        "id": "7ef01344844389b8",
        "type": "function",
        "z": "375ee1d6cf6e3891",
        "name": "DELETE JOBCTL_HOST",
        "func": "global.set(\"JOBCTL_HOST\", null)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "18819cbac00ebaf8",
        "type": "function",
        "z": "c826488602403262",
        "name": "assign-topics",
        "func": "const topicPath = env.get(\"topicPath\") //ex.msg.status\nconst selectTopic = RED.util.getPropByPath(msg, topicPath) // ex. topicPath: 'git'\n\nconst statusPath = env.get(\"statusPath\") //ex.msg.status\nconst selectStatus = RED.util.getPropByPath(msg, statusPath) || \"new\"\n\nconst statusFlow = {\n    \"new\": \"assigned\",\n    \"assigned\": \"in-progress\",\n    \"in-progress\": \"completed\"\n}\nconst nextStatus = statusFlow[selectStatus]\nconst topics = global.get(\"TOPICS\") || new Map()\n/*\n topics = {\n     ${selectTopic} :{ //selectTopic: 'git'\n        ${status}: {   //status: 'new'\n            ${uuid}: { //uuid: 'eac328ef-93f8-49d4-be5b-60b9e678e283'\n                param: {\n                    target: \"A0000_0000\",\n                    jobsession: \"20230604\"\n                },\n                topic: \"git\",\n                uuid: \"eac328ef-93f8-49d4-be5b-60b9e678e283\",\n                status: \"completed\" \n            }}}}\n*/\nconst topicStatus = topics.get(selectTopic) || new Map()     //topics.${selectTopic}\nconst topic_new = topicStatus.get(selectStatus) || new Map() //topics.${selectTopic}.${selectStatus}\nconst topic_proc = topicStatus.get(nextStatus) || new Map()  //topics.${selectTopic}.${nextStatus}\nconst topicTicket = RED.util.mappop(topic_new)               //pop(topics.${selectTopic}.${selectStatus})\n\nif (!topicTicket) return [null, msg]\ntopicTicket.status = nextStatus\n\nif (msg.workerName) {\n    topicTicket.workerName = msg.workerName\n}\n\ntopic_proc.set(topicTicket.uuid, topicTicket)\n\ntopicStatus.set(selectStatus, topic_new)\ntopicStatus.set(nextStatus, topic_proc)\ntopics.set(selectTopic, topicStatus)\nglobal.set(\"TOPICS\", topics)\n\nmsg = Object.assign(msg, { payload: { topic: topicTicket.topic, topicTicket: topicTicket } });\n\nreturn [msg, null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9824a4787a5aa8d6",
        "type": "function",
        "z": "b8cfb4b94405d94d",
        "name": "fillter topic",
        "func": "const TARGET_TOPICS = (env.get(\"TOPICS\") || \"topic0,topic1,topic2\").split(',')\nconst TARGET_TOPICS_NO = global.get(\"TARGET_TOPICS_NO\") || 0\nconst topicName = TARGET_TOPICS[TARGET_TOPICS_NO]\nglobal.set(\"TARGET_TOPICS_NO\", (TARGET_TOPICS.length - 1 > TARGET_TOPICS_NO) ? TARGET_TOPICS_NO + 1 : 0)\n//const topic = { name: topicName, status: \"new\" }\nmsg = Object.assign(msg, { topic: topicName });\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "a27285317db43ec7",
        "type": "function",
        "z": "d6f01b04a12d7282",
        "name": "topic_add",
        "func": "\nconst topicPath = env.get(\"topicPath\") //ex.msg.payload.topic \nconst topicTicket = RED.util.getPropByPath(msg, topicPath)//{topic: \"\",param: { }}\ntopicTicket.uuid = crypto.randomUUID()\n\nif (!topicTicket) return msg\n//{topicname:[{topic:\"\",param: {}}}]}\nconst topicName = topicTicket.topic\nconst topics = global.get(\"TOPICS\") || new Map()\nconst topicStatus = topics.get(topicName) || new Map()\nconst topic = topicStatus.get(\"new\") || new Map()\ntopic.set(topicTicket.uuid,topicTicket)\ntopicStatus.set(\"new\", topic)\ntopics.set(topicName, topicStatus)\nglobal.set(\"TOPICS\", topics)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "126cbf276ed23332",
        "type": "function",
        "z": "0eb6c089a1f171e9",
        "name": "listup-topics",
        "func": "//{topicname:[{name:\"\",status: \"new\"}]}\n\nconst statusPath = env.get(\"statusPath\") //ex.msg.status\nconst selectStatus = RED.util.getPropByPath(msg, statusPath) || \"new\"\n\nconst topics = global.get(\"TOPICS\") || new Map()\n/*\n topics = {\n     ${selectTopic} :{ //selectTopic: 'git'\n        ${status}: {   //status: 'new'\n            ${uuid}: { //uuid: 'eac328ef-93f8-49d4-be5b-60b9e678e283'\n                param: {\n                    target: \"A0000_0000\",\n                    jobsession: \"20230604\"\n                },\n                topic: \"git\",\n                uuid: \"eac328ef-93f8-49d4-be5b-60b9e678e283\",\n                status: \"completed\" \n            }}}}\n*/\nconst topics_list = new Array()\n\nfor (const [topicName, topicStatus] of topics) {                //topics.${selectTopic}\n    const topic_new = topicStatus.get(selectStatus) || new Map()//topics.${selectTopic}.${selectStatus}\n    if (topic_new.size > 0) topics_list.push(topicName)\n}\n\nmsg = Object.assign(msg, { payload: { list: topics_list } });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "df88c0ce3abe7f11",
        "type": "function",
        "z": "f5ba2b0f4e9255e0",
        "name": "update-topics",
        "func": "const topicPath = env.get(\"topicPath\") //ex.msg.status\nconst selectTopic = RED.util.getPropByPath(msg, topicPath) // ex. topicPath: 'git'\n\nconst statusPath = env.get(\"statusPath\") //ex.msg.status\nconst selectStatus = RED.util.getPropByPath(msg, statusPath) || \"new\"\n\nconst uuidPath = env.get(\"uuidPath\") //ex.msg.status\nconst uuid = RED.util.getPropByPath(msg, uuidPath) || \"uuid\"\n\nconst statusFlow = {\n    \"new\": \"assigned\",\n    \"assigned\": \"in-progress\",\n    \"in-progress\": \"completed\"\n}\nconst nextStatus = statusFlow[selectStatus]\nconst topics = global.get(\"TOPICS\") || new Map()\n/*\n topics = {\n     ${selectTopic} :{ //selectTopic: 'git'\n        ${status}: {   //status: 'new'\n            ${uuid}: { //uuid: 'eac328ef-93f8-49d4-be5b-60b9e678e283'\n                param: {\n                    target: \"A0000_0000\",\n                    jobsession: \"20230604\"\n                },\n                topic: \"git\",\n                uuid: \"eac328ef-93f8-49d4-be5b-60b9e678e283\",\n                status: \"completed\" \n            }}}}\n*/\nconst topicStatus = topics.get(selectTopic) || new Map()     //topics.${selectTopic}\nconst topic_new = topicStatus.get(selectStatus) || new Map() //topics.${selectTopic}.${selectStatus}\nconst topic_proc = topicStatus.get(nextStatus) || new Map()  //topics.${selectTopic}.${nextStatus}\nconst topicTicket = topic_new.get(uuid)                      //topics.${selectTopic}.${selectStatus}.${uuid}\n\nif (!topicTicket) return [null, msg]\nif (!topic_new.delete(uuid)) return [null, msg]\ntopicTicket.status = nextStatus\ntopic_proc.set(topicTicket.uuid, topicTicket)\n\ntopicStatus.set(selectStatus, topic_new)\ntopicStatus.set(nextStatus, topic_proc)\ntopics.set(selectTopic, topicStatus)\nglobal.set(\"TOPICS\", topics)\n\nmsg = Object.assign(msg, { payload: { topic: topicTicket.topic, topicTicket: JSON.stringify(topicTicket) } });\n\nreturn [msg, null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "998fa97d665f6910",
        "type": "function",
        "z": "1f63a3ba2a6337e6",
        "name": "add-waitlist",
        "func": "const topicPath = env.get(\"topicNamePath\") //ex.msg.payload.topic \nconst topicName = RED.util.getPropByPath(msg, topicPath)//{topic: \"\",param: { }}\n\n//{topicname:[{topic:\"\",param: {}}}]}\nconst waitlist = global.get(\"WAITLIST_TOPICS\") || new Array()\nwaitlist.push(topicName)\nglobal.set(\"WAITLIST_TOPICS\", waitlist)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "2e548032e1145bc9",
        "type": "function",
        "z": "f1b787faf67b8960",
        "name": "assign-waitlist",
        "func": "const waitlist = global.get(\"WAITLIST_TOPICS\") || new Array()//{topicname:[{name:\"\",status: \"new\"}]}\nconst topicName = waitlist.pop()\nif (!topicName) return [null, msg]\nglobal.set(\"WAITLIST_TOPICS\", waitlist)\nmsg = Object.assign(msg, { topic: topicName });\nreturn [msg, null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "210c38446e598771",
        "type": "function",
        "z": "b1626fc28a971f31",
        "name": "split-array",
        "func": "\nconst inputArrayPath = env.get(\"inputArrayPath\") //ex.msg.payload.topic \nconst list = RED.util.getPropByPath(msg, inputArrayPath)//{topic: \"\",param: { }}\nconst outputPath = env.get(\"outputPath\") //ex.msg.payload.topic \n\nfor (const key in list) {\n    const retmsg = RED.util.setPropByPath(msg, outputPath, list[key])\n    node.send(retmsg);\n}\n\n//node.done();\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b19fa56a77429a44",
        "type": "function",
        "z": "7157de4597b60201",
        "name": "flow-limit",
        "func": "//{topicname:[{name:\"\",status: \"new\"}]}\nconst flowstatus = global.get(\"FLOW_STATUS\") || new Map()\nconst max = global.get(\"FLOW_MAX\") || 1\n\nif (flowstatus.size >= max) return [null, msg]\nreturn [msg, null]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "e0410ad4c1884406",
        "type": "function",
        "z": "f6c57fcec804269c",
        "name": "flow-start",
        "func": "//{topicname:[{name:\"\",status: \"new\"}]}\nconst flowstatus = global.get(\"FLOW_STATUS\") || new Map()\n\nconst topicTicket = msg.payload.topicTicket\nconst uuid = topicTicket.uuid\nif (flowstatus.has(uuid)) return [null, msg]\nflowstatus.set(uuid, topicTicket)\nglobal.set(\"FLOW_STATUS\", flowstatus)\nmsg.topicTicket = topicTicket\nmsg.topic = topicTicket.topic\nmsg.uuid = uuid\nreturn [msg, null]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f2b282801e277ec6",
        "type": "function",
        "z": "e9700f935181888e",
        "name": "flow-end",
        "func": "//{topicname:[{name:\"\",status: \"new\"}]}\nconst flowstatus = global.get(\"FLOW_STATUS\") || new Map()\n\nconst uuidPath = env.get(\"uuidPath\")\nconst uuid = RED.util.getPropByPath(msg, uuidPath)\n\nif (!flowstatus.has(uuid)) return [null, msg]\n\nflowstatus.delete(uuid)\nglobal.set(\"FLOW_STATUS\", flowstatus)\nreturn [msg, null]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "ca70b65374e24ae8",
        "type": "subflow:375ee1d6cf6e3891",
        "z": "131075747e8871f8",
        "name": "topic取得",
        "env": [
            {
                "name": "actionType",
                "value": "assign",
                "type": "str"
            },
            {
                "name": "topicTicketPath",
                "value": "topic",
                "type": "str"
            }
        ],
        "x": 740,
        "y": 80,
        "wires": [
            [
                "bd61d5cefb666280"
            ],
            []
        ]
    },
    {
        "id": "60ccecf9024cc129",
        "type": "subflow:b3da594ab22fa515",
        "z": "131075747e8871f8",
        "name": "",
        "x": 190,
        "y": 160,
        "wires": [
            [],
            [
                "006e9d528f47ee98"
            ]
        ]
    },
    {
        "id": "006e9d528f47ee98",
        "type": "subflow:7157de4597b60201",
        "z": "131075747e8871f8",
        "name": "",
        "x": 380,
        "y": 160,
        "wires": [
            [
                "4fe8256c417e35d5"
            ],
            []
        ]
    },
    {
        "id": "bd61d5cefb666280",
        "type": "subflow:f6c57fcec804269c",
        "z": "131075747e8871f8",
        "name": "",
        "x": 900,
        "y": 60,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "4fe8256c417e35d5",
        "type": "subflow:b8cfb4b94405d94d",
        "z": "131075747e8871f8",
        "name": "",
        "x": 570,
        "y": 80,
        "wires": [
            [
                "ca70b65374e24ae8"
            ]
        ]
    },
    {
        "id": "707bc717a0d8c626",
        "type": "subflow:375ee1d6cf6e3891",
        "z": "1ec11fe81fee736c",
        "name": "topic 完了",
        "env": [
            {
                "name": "actionType",
                "value": "completed",
                "type": "str"
            },
            {
                "name": "topicPath",
                "value": "topicTicket",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 60,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "82c3b0b299dbe8a3",
        "type": "subflow:b3da594ab22fa515",
        "z": "1ec11fe81fee736c",
        "name": "",
        "x": 190,
        "y": 80,
        "wires": [
            [],
            [
                "de4e7c1a54204bc7"
            ]
        ]
    },
    {
        "id": "de4e7c1a54204bc7",
        "type": "subflow:e9700f935181888e",
        "z": "1ec11fe81fee736c",
        "name": "",
        "env": [
            {
                "name": "uuidPath",
                "value": "uuidPath",
                "type": "env"
            }
        ],
        "x": 380,
        "y": 80,
        "wires": [
            [
                "9bc19cbed4ee7380"
            ],
            []
        ]
    },
    {
        "id": "9bc19cbed4ee7380",
        "type": "function",
        "z": "1ec11fe81fee736c",
        "name": "function 2",
        "func": "const topicPath = env.get(\"topicPath\")\nconst uuidPath = env.get(\"uuidPath\")\nconst topic = RED.util.getPropByPath(msg, topicPath)\nconst uuid = RED.util.getPropByPath(msg, uuidPath)\n\nmsg.topicTicket = { topic: topic, uuid: uuid }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 60,
        "wires": [
            [
                "707bc717a0d8c626"
            ]
        ]
    },
    {
        "id": "33bb87efab5d968d",
        "type": "debug",
        "z": "6399b4d8775a079a",
        "name": "Success Add topic",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 640,
        "wires": []
    },
    {
        "id": "75aa04f7b0569c59",
        "type": "inject",
        "z": "6399b4d8775a079a",
        "name": "未処理topicの配信",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "",
        "x": 210,
        "y": 800,
        "wires": [
            [
                "33ff37445fd71e22"
            ]
        ]
    },
    {
        "id": "ac71904c6ec568e3",
        "type": "http in",
        "z": "6399b4d8775a079a",
        "name": "topic assign",
        "url": "/assign/:topic",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 920,
        "wires": [
            [
                "66bb7f7f83faa6c9"
            ]
        ]
    },
    {
        "id": "66bb7f7f83faa6c9",
        "type": "change",
        "z": "6399b4d8775a079a",
        "name": "set parameter",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "req.params.topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "msg",
                "to": "assigned",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "cluster_service_uid",
                "pt": "msg",
                "to": "req.headers.x-cluster_service_uid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 920,
        "wires": [
            [
                "2372af7c30fab0e8"
            ]
        ]
    },
    {
        "id": "b781c8a3c7f1c961",
        "type": "http response",
        "z": "6399b4d8775a079a",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1280,
        "y": 900,
        "wires": []
    },
    {
        "id": "879ef2c221179d06",
        "type": "subflow:c826488602403262",
        "z": "6399b4d8775a079a",
        "name": "",
        "x": 910,
        "y": 900,
        "wires": [
            [
                "fa378d358dbc8c4f"
            ],
            [
                "b3b1347496e2aea7"
            ]
        ]
    },
    {
        "id": "5f8645481b17a6ba",
        "type": "http response",
        "z": "6399b4d8775a079a",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1280,
        "y": 960,
        "wires": []
    },
    {
        "id": "6107c34b869084b6",
        "type": "subflow:d6f01b04a12d7282",
        "z": "6399b4d8775a079a",
        "name": "",
        "env": [
            {
                "name": "topicPath",
                "value": "topic",
                "type": "str"
            }
        ],
        "x": 560,
        "y": 640,
        "wires": [
            [
                "33bb87efab5d968d"
            ]
        ]
    },
    {
        "id": "041f26bfc1e571d0",
        "type": "subflow:0eb6c089a1f171e9",
        "z": "6399b4d8775a079a",
        "name": "",
        "x": 560,
        "y": 800,
        "wires": [
            [
                "3874f7a637f95d3c"
            ]
        ]
    },
    {
        "id": "fa378d358dbc8c4f",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "assing result",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topic\": msg.payload.topic,\n    \"topicTicket\": msg.payload.topicTicket\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 900,
        "wires": [
            [
                "b781c8a3c7f1c961"
            ]
        ]
    },
    {
        "id": "b3b1347496e2aea7",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "assing result",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topic\": msg.topic\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 960,
        "wires": [
            [
                "5f8645481b17a6ba"
            ]
        ]
    },
    {
        "id": "c806e24325115901",
        "type": "subflow:27227cef106a74f0",
        "z": "6399b4d8775a079a",
        "name": "Add topic",
        "env": [
            {
                "name": "actionType",
                "value": "addtopic",
                "type": "str"
            }
        ],
        "x": 180,
        "y": 680,
        "wires": [
            [
                "7c0b1bd77116fda0"
            ]
        ]
    },
    {
        "id": "33ff37445fd71e22",
        "type": "subflow:b3da594ab22fa515",
        "z": "6399b4d8775a079a",
        "name": "",
        "x": 390,
        "y": 800,
        "wires": [
            [
                "041f26bfc1e571d0"
            ],
            []
        ]
    },
    {
        "id": "038dbdaf6002571c",
        "type": "subflow:c826488602403262",
        "z": "6399b4d8775a079a",
        "name": "",
        "env": [
            {
                "name": "topicPath",
                "value": "payload.topic",
                "type": "str"
            }
        ],
        "x": 850,
        "y": 800,
        "wires": [
            [
                "d57fb4f666b653d6"
            ],
            []
        ]
    },
    {
        "id": "d57fb4f666b653d6",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "assing result",
        "func": "msg.payload = {\n     \"topic\": msg.payload.topic \n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "2372af7c30fab0e8",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "JSON.parse",
        "func": "if (msg.topic) {\n    try {\n        msg.topic = JSON.parse(msg.topic)\n    } catch (error) {\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 920,
        "wires": [
            [
                "15b5ee12766608b5"
            ]
        ]
    },
    {
        "id": "0875188206215aa8",
        "type": "comment",
        "z": "6399b4d8775a079a",
        "name": "jobctlより1m間隔で配信",
        "info": "",
        "x": 220,
        "y": 760,
        "wires": []
    },
    {
        "id": "84186f06dd80bd09",
        "type": "comment",
        "z": "6399b4d8775a079a",
        "name": "workerから新規topicの受信",
        "info": "",
        "x": 230,
        "y": 640,
        "wires": []
    },
    {
        "id": "0b9f36fafe8b569f",
        "type": "comment",
        "z": "6399b4d8775a079a",
        "name": "workerにtopicのassign",
        "info": "",
        "x": 210,
        "y": 880,
        "wires": []
    },
    {
        "id": "899f97df45f4539f",
        "type": "comment",
        "z": "6399b4d8775a079a",
        "name": "cluster参加処理",
        "info": "",
        "x": 200,
        "y": 180,
        "wires": []
    },
    {
        "id": "ba396e40b915898a",
        "type": "http in",
        "z": "6399b4d8775a079a",
        "name": "topic completed",
        "url": "/completed/:topic",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 1080,
        "wires": [
            [
                "cc1c306c7a0b926e"
            ]
        ]
    },
    {
        "id": "cc1c306c7a0b926e",
        "type": "change",
        "z": "6399b4d8775a079a",
        "name": "set parameter",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "req.params.topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "msg",
                "to": "in-progress",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1080,
        "wires": [
            [
                "8c6807c1605b1cf9"
            ]
        ]
    },
    {
        "id": "faaa745d4c17dcae",
        "type": "http response",
        "z": "6399b4d8775a079a",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1280,
        "y": 1080,
        "wires": []
    },
    {
        "id": "bb91929872a6fdeb",
        "type": "http response",
        "z": "6399b4d8775a079a",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1280,
        "y": 1120,
        "wires": []
    },
    {
        "id": "c329f731b22b9173",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "assing result",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topic\": msg.payload.topic,\n    \"topicTicket\": msg.payload.topicTicket\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1080,
        "wires": [
            [
                "faaa745d4c17dcae"
            ]
        ]
    },
    {
        "id": "36e36c6b56939fed",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "assing result",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topic\": msg.topic\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1120,
        "wires": [
            [
                "bb91929872a6fdeb"
            ]
        ]
    },
    {
        "id": "8c6807c1605b1cf9",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "JSON.parse",
        "func": "if (msg.topic) {\n    try {\n        msg.topic = JSON.parse(msg.topic)\n    } catch (error) {\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1080,
        "wires": [
            [
                "e8dfbc55efe2889f"
            ]
        ]
    },
    {
        "id": "32f629c82e7afe15",
        "type": "comment",
        "z": "6399b4d8775a079a",
        "name": "workerからtopic完了受信",
        "info": "",
        "x": 220,
        "y": 1040,
        "wires": []
    },
    {
        "id": "e8dfbc55efe2889f",
        "type": "subflow:f5ba2b0f4e9255e0",
        "z": "6399b4d8775a079a",
        "name": "",
        "env": [
            {
                "name": "topicPath",
                "value": "topic.topic",
                "type": "str"
            },
            {
                "name": "uuidPath",
                "value": "topic.uuid",
                "type": "str"
            }
        ],
        "x": 910,
        "y": 1080,
        "wires": [
            [
                "c329f731b22b9173"
            ],
            [
                "36e36c6b56939fed"
            ]
        ]
    },
    {
        "id": "3874f7a637f95d3c",
        "type": "subflow:b1626fc28a971f31",
        "z": "6399b4d8775a079a",
        "name": "",
        "x": 700,
        "y": 800,
        "wires": [
            [
                "038dbdaf6002571c"
            ]
        ]
    },
    {
        "id": "e5354780b7eaedca",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "REVOKE WORKER",
        "func": "\nconst WORKER_EXPIRY = global.get(\"WORKER_EXPIRY\") || 5;//5分前\nconst WORKER_HOSTS = global.get(\"WORKER_HOSTS\") || new Map();\n\nconst now = new Date()\nconst timeout = now.setMinutes(now.getMinutes() - WORKER_EXPIRY)\n\nfor (const [workerName, worker] of WORKER_HOSTS) {\n    if (worker.STATUS_DATE < timeout) {\n        worker.STATUS = 'dead'\n        msg.worker = worker\n        msg.workerName = workerName\n        node.warn(`timeout: ${workerName}`);\n        node.send(msg, null)\n        WORKER_HOSTS.delete(workerName)\n    }\n}\n\nglobal.set(\"WORKER_HOSTS\", WORKER_HOSTS)\nnode.send(null, msg);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 360,
        "wires": [
            [
                "18bb4c3128c497d0"
            ],
            []
        ]
    },
    {
        "id": "dce18bd5e0479bef",
        "type": "inject",
        "z": "6399b4d8775a079a",
        "name": "CHECK ALIVE",
        "props": [],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "x": 200,
        "y": 360,
        "wires": [
            [
                "84175a1e2f8ce3b1"
            ]
        ]
    },
    {
        "id": "84175a1e2f8ce3b1",
        "type": "subflow:b3da594ab22fa515",
        "z": "6399b4d8775a079a",
        "name": "",
        "x": 430,
        "y": 360,
        "wires": [
            [
                "e5354780b7eaedca"
            ],
            []
        ]
    },
    {
        "id": "15b5ee12766608b5",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "get worker",
        "func": "try {\n    [msg.workerName, msg.worker] = RED.util.getWorkerInfo(this,msg.cluster_service_uid)\n\n} catch (error) {\n    node.error(`get worker error ${error}`, error);\n};\nif (msg.workerName) return [msg,null];\nreturn [null, msg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 920,
        "wires": [
            [
                "879ef2c221179d06"
            ],
            [
                "b3b1347496e2aea7"
            ]
        ]
    },
    {
        "id": "18bb4c3128c497d0",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "RevertTopicStatus",
        "func": "//const statusPath = env.get(\"statusPath\") //ex.msg.status\n//const selectStatus = RED.util.getPropByPath(msg, statusPath) || \"in-progress\"\nconst selectStatus = \"in-progress\"\n\nconst topics = global.get(\"TOPICS\") || new Map()\n/*\n topics = {\n     ${selectTopic} :{ //selectTopic: 'git'\n        ${status}: {   //status: 'new'\n            ${uuid}: { //uuid: 'eac328ef-93f8-49d4-be5b-60b9e678e283'\n                param: {\n                    target: \"A0000_0000\",\n                    jobsession: \"20230604\"\n                },\n                topic: \"git\",\n                uuid: \"eac328ef-93f8-49d4-be5b-60b9e678e283\",\n                status: \"completed\",\n                workerName: \"nodered-worker-deployment-86b6fd6496-wrn6b:1880\"\n                worker: obj \n            }}}}\n*/\n// selectStatus を newに戻す\nfor (const [topicName, topicStatus] of topics) {                   //topics.${selectTopic}\n    const topic_new = topicStatus.get(\"new\") || new Map()          //topics.${selectTopic}.${selectStatus}\n    const target_topic = topicStatus.get(selectStatus) || new Map()//topics.${selectTopic}.${selectStatus}\n    for (const [uuid, data] of target_topic) {\n        if (data.workerName == msg.workerName) {\n            data.workerName = null\n            topic_new.set(uuid, data)\n            target_topic.delete(uuid)\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "1253e8ae6b90b4aa",
        "type": "subflow:375ee1d6cf6e3891",
        "z": "6399b4d8775a079a",
        "name": "addtopic",
        "env": [
            {
                "name": "actionType",
                "value": "addtopic",
                "type": "str"
            },
            {
                "name": "topicTicketPath",
                "value": "topic",
                "type": "str"
            }
        ],
        "x": 560,
        "y": 720,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "7c0b1bd77116fda0",
        "type": "subflow:b3da594ab22fa515",
        "z": "6399b4d8775a079a",
        "name": "",
        "x": 370,
        "y": 680,
        "wires": [
            [
                "6107c34b869084b6"
            ],
            [
                "1253e8ae6b90b4aa"
            ]
        ]
    },
    {
        "id": "fb4ec2935b69f4cb",
        "type": "http in",
        "z": "6399b4d8775a079a",
        "name": "CONNECT",
        "url": "/CONNECT",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "2c227746c1738f2a"
            ]
        ]
    },
    {
        "id": "2c227746c1738f2a",
        "type": "subflow:b3da594ab22fa515",
        "z": "6399b4d8775a079a",
        "name": "",
        "x": 350,
        "y": 240,
        "wires": [
            [
                "8844d2d35f8f969c"
            ],
            []
        ]
    },
    {
        "id": "8844d2d35f8f969c",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "CONNECT WORKER ",
        "func": "msg.payload = JSON.parse(msg.payload);\n\nif (msg.payload.CLUSTER_ROLE !== \"worker\") return msg;\nif (msg.payload.CLUSTER_GROUP !== env.get('CLUSTER_GROUP')) return msg;\n\nconst WORKER_HOSTS = global.get(\"WORKER_HOSTS\") || new Map();\nconst fromip = `${msg.payload.CLUSTER_SERVICE_HOST}:${msg.payload.CLUSTER_SERVICE_HTTP_PORT || \"1880\"}`\nWORKER_HOSTS.set(fromip, {\n    ID: msg.payload.CLUSTER_SERVICE_UID,\n    HOST: msg.payload.CLUSTER_SERVICE_HOST || msg.payload.CLUSTER_SERVICE_IP,\n    IP: msg.payload.CLUSTER_SERVICE_IP || msg.payload.CLUSTER_SERVICE_HOST,\n    HTTP_PORT: msg.payload.CLUSTER_SERVICE_HTTP_PORT || \"1880\",\n    UDP_PORT: msg.payload.CLUSTER_SERVICE_UDP_PORT || \"2880\",\n\n    NODE_RED_VERSION: msg.payload.NODE_RED_VERSION,\n    CLUSTER_GROUP: msg.payload.CLUSTER_GROUP,\n    ROLE: msg.payload.CLUSTER_ROLE,\n    STATUS_DATE: new Date(),\n    STATUS: 'live'\n})\nglobal.set(\"WORKER_HOSTS\", WORKER_HOSTS)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 240,
        "wires": [
            [
                "5c21c8789fee6991"
            ]
        ]
    },
    {
        "id": "1e096f054982ddf5",
        "type": "http response",
        "z": "6399b4d8775a079a",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 960,
        "y": 240,
        "wires": []
    },
    {
        "id": "5c21c8789fee6991",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "SEND COMMAND",
        "func": "\nconst CLUSTER_SERVICE_HTTP_PORT = env.get(\"PORT\") || \"1880\"\nconst CLUSTER_SERVICE_UDP_PORT = env.get(\"UDPPORT\") || \"2880\"\n\nconst CLUSTER_GROUP = env.get(\"CLUSTER_GROUP\")\nconst CLUSTER_ROLE = env.get(\"CLUSTER_ROLE\")\n//const CLUSTER_SERVICE_HOST = env.get(\"KUBERNETES_SERVICE_HOST\")\nmsg.LocalAddress = RED.util.getLocalAddress().ipv4[0]\nconst CLUSTER_SERVICE_IP = msg.LocalAddress.address\nconst CLUSTER_SERVICE_HOST = env.get(\"HOSTNAME\") || CLUSTER_SERVICE_IP\nconst NODE_RED_VERSION = env.get(\"NODE_RED_VERSION\")\nconst COMMAND = env.get(\"COMMAND\")\n\nconst CLUSTER_SERVICE_UID = RED.util.procuuid\n\nmsg.payload = JSON.stringify({\n    \"COMMAND\": COMMAND,\n    \"CLUSTER_GROUP\": CLUSTER_GROUP,\n    \"CLUSTER_ROLE\": CLUSTER_ROLE,\n    \"CLUSTER_SERVICE_UID\": CLUSTER_SERVICE_UID,\n    \"CLUSTER_SERVICE_HOST\": CLUSTER_SERVICE_HOST,\n    \"CLUSTER_SERVICE_IP\": CLUSTER_SERVICE_IP,\n    \"CLUSTER_SERVICE_HTTP_PORT\": CLUSTER_SERVICE_HTTP_PORT,\n    \"CLUSTER_SERVICE_UDP_PORT\": CLUSTER_SERVICE_UDP_PORT,\n    \"NODE_RED_VERSION\": NODE_RED_VERSION,\n    \"PAYLOAD\": msg.payload\n})\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 790,
        "y": 240,
        "wires": [
            [
                "1e096f054982ddf5"
            ]
        ]
    },
    {
        "id": "98aa1ba2f15cf6c3",
        "type": "comment",
        "z": "6399b4d8775a079a",
        "name": "taskから新規topicを転送",
        "info": "",
        "x": 610,
        "y": 680,
        "wires": []
    },
    {
        "id": "6cba37377e6ca17d",
        "type": "http in",
        "z": "6399b4d8775a079a",
        "name": "HEARTBEAT",
        "url": "/HEARTBEAT",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "fdb24df384a35a01"
            ]
        ]
    },
    {
        "id": "fdb24df384a35a01",
        "type": "subflow:b3da594ab22fa515",
        "z": "6399b4d8775a079a",
        "name": "",
        "x": 350,
        "y": 300,
        "wires": [
            [
                "0de5c6eb7cc8aa43"
            ],
            []
        ]
    },
    {
        "id": "b4efa3a843464b7a",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "PROC HEARTBEAT",
        "func": "try {\n    [msg.workerName, msg.worker] = RED.util.getWorkerInfo(this, msg.cluster_service_uid)\n} catch (error) {\n    node.error(`get worker error ${error}`, error)\n};\n\nif (msg.workerName == null) return [null, msg]\nconst WORKER_HOSTS = global.get(\"WORKER_HOSTS\") || new Map()\nmsg.worker.STATUS_DATE = new Date()\nmsg.worker.STATUS = 'live'\nWORKER_HOSTS.set(msg.workerName, msg.worker)\nglobal.set(\"WORKER_HOSTS\", WORKER_HOSTS)\nreturn [msg, null]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 300,
        "wires": [
            [
                "c06eb6316c216ba4"
            ],
            []
        ]
    },
    {
        "id": "291448c7e843c241",
        "type": "http response",
        "z": "6399b4d8775a079a",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1160,
        "y": 300,
        "wires": []
    },
    {
        "id": "c06eb6316c216ba4",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "PROC Response",
        "func": "msg.payload = JSON.stringify({})\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 990,
        "y": 300,
        "wires": [
            [
                "291448c7e843c241"
            ]
        ]
    },
    {
        "id": "0de5c6eb7cc8aa43",
        "type": "change",
        "z": "6399b4d8775a079a",
        "name": "set parameter",
        "rules": [
            {
                "t": "set",
                "p": "cluster_service_uid",
                "pt": "msg",
                "to": "req.headers.x-cluster_service_uid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 300,
        "wires": [
            [
                "b4efa3a843464b7a"
            ]
        ]
    },
    {
        "id": "4c5385a7f2e8115c",
        "type": "inject",
        "z": "4d4915ce082a1010",
        "name": "CONNECT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "test",
        "payloadType": "str",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "7dce50426a1c2ecb"
            ]
        ]
    },
    {
        "id": "832ca1338123e685",
        "type": "comment",
        "z": "4d4915ce082a1010",
        "name": "clusterへの参加",
        "info": "",
        "x": 480,
        "y": 200,
        "wires": []
    },
    {
        "id": "d7502b44e66c5bbc",
        "type": "function",
        "z": "4d4915ce082a1010",
        "name": "SEND COMMAND",
        "func": "\nconst CLUSTER_SERVICE_HTTP_PORT = env.get(\"PORT\") || \"1880\"\n\nconst CLUSTER_GROUP = env.get(\"CLUSTER_GROUP\")\nconst CLUSTER_ROLE = env.get(\"CLUSTER_ROLE\")\n//const CLUSTER_SERVICE_HOST = env.get(\"KUBERNETES_SERVICE_HOST\")\nmsg.LocalAddress = RED.util.getLocalAddress().ipv4[0]\nconst CLUSTER_SERVICE_IP = msg.LocalAddress.address\nconst CLUSTER_SERVICE_HOST = env.get(\"HOSTNAME\") || CLUSTER_SERVICE_IP\nconst NODE_RED_VERSION = env.get(\"NODE_RED_VERSION\")\nconst COMMAND = env.get(\"COMMAND\")\n\nconst CLUSTER_SERVICE_UID = RED.util.procuuid\n\nmsg.payload = JSON.stringify({\n    \"COMMAND\": COMMAND,\n    \"CLUSTER_GROUP\": CLUSTER_GROUP,\n    \"CLUSTER_ROLE\": CLUSTER_ROLE,\n    \"CLUSTER_SERVICE_UID\": CLUSTER_SERVICE_UID,\n    \"CLUSTER_SERVICE_HOST\": CLUSTER_SERVICE_HOST,\n    \"CLUSTER_SERVICE_IP\": CLUSTER_SERVICE_IP,\n    \"CLUSTER_SERVICE_HTTP_PORT\": CLUSTER_SERVICE_HTTP_PORT,\n    \"NODE_RED_VERSION\": NODE_RED_VERSION,\n    \"PAYLOAD\": msg.payload\n})\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 650,
        "y": 260,
        "wires": [
            [
                "037bbac4f152dc89"
            ]
        ]
    },
    {
        "id": "037bbac4f152dc89",
        "type": "http request",
        "z": "4d4915ce082a1010",
        "name": "CONNECT",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "{{{joburl}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-cluster_service_uid",
                "valueType": "msg",
                "valueValue": "cluster_service_uid"
            }
        ],
        "x": 830,
        "y": 260,
        "wires": [
            [
                "735c659f87d1681c"
            ]
        ]
    },
    {
        "id": "735c659f87d1681c",
        "type": "function",
        "z": "4d4915ce082a1010",
        "name": "ADD JOBCTL_HOST",
        "func": "if (!msg.payload) return [null, msg];\ntry {\n    msg.payload = JSON.parse(msg.payload);\n} catch (error) {\n    return [null, msg]\n}\n\nif (msg.payload.CLUSTER_ROLE !== \"jobctl\") return msg;\nif (msg.payload.CLUSTER_GROUP !== env.get('CLUSTER_GROUP')) return msg;\nconst JOBCTL_HOST = {\n    ID: msg.payload.CLUSTER_SERVICE_UID,\n    HOST: msg.payload.CLUSTER_SERVICE_HOST || msg.payload.CLUSTER_SERVICE_IP,\n    IP: msg.payload.CLUSTER_SERVICE_IP || msg.payload.CLUSTER_SERVICE_HOST,\n    HTTP_PORT: msg.payload.CLUSTER_SERVICE_HTTP_PORT || \"1880\",\n    UDP_PORT: msg.payload.CLUSTER_SERVICE_UDP_PORT || \"2880\",\n\n    NODE_RED_VERSION: msg.payload.NODE_RED_VERSION,\n    CLUSTER_GROUP: msg.payload.CLUSTER_GROUP,\n    ROLE: msg.payload.CLUSTER_ROLE,\n    STATUS_DATE: new Date(),\n    STATUS: 'live'\n}\nglobal.set(\"JOBCTL_HOST\", JOBCTL_HOST)\nreturn [msg, null]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 260,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d0e75f004f3cf6c3",
        "type": "function",
        "z": "4d4915ce082a1010",
        "name": "has JOBCTL_HOST",
        "func": "const JOBCTL_HOST = global.get(\"JOBCTL_HOST\")\nif (!JOBCTL_HOST) return [null, msg] \nreturn [msg,null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 140,
        "wires": [
            [
                "076e59c3bd53281b"
            ],
            [
                "f51a42a80aaef931"
            ]
        ]
    },
    {
        "id": "c013b8682cbbd9ca",
        "type": "comment",
        "z": "4d4915ce082a1010",
        "name": "生存確認",
        "info": "",
        "x": 680,
        "y": 20,
        "wires": []
    },
    {
        "id": "88c4142b09dff4e5",
        "type": "http request",
        "z": "4d4915ce082a1010",
        "name": "HEARTBEAT",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{joburl}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-cluster_service_uid",
                "valueType": "msg",
                "valueValue": "cluster_service_uid"
            }
        ],
        "x": 850,
        "y": 80,
        "wires": [
            [
                "aca4ee8b221fdf66"
            ]
        ]
    },
    {
        "id": "f51a42a80aaef931",
        "type": "function",
        "z": "4d4915ce082a1010",
        "name": "generate_url",
        "func": "\nconst JOBCTL_SERVICE_NAME = env.get(\"JOBCTL_SERVICE_NAME\")\nconst JOBCTL_SERVICE_PORT = env.get(\"JOBCTL_SERVICE_PORT\")\n\nmsg.joburl = `http://${JOBCTL_SERVICE_NAME}:${JOBCTL_SERVICE_PORT}/CONNECT`\nmsg.cluster_service_uid = RED.util.procuuid\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 260,
        "wires": [
            [
                "d7502b44e66c5bbc"
            ]
        ]
    },
    {
        "id": "076e59c3bd53281b",
        "type": "function",
        "z": "4d4915ce082a1010",
        "name": "generate_url",
        "func": "const JOBCTL_HOST = global.get(\"JOBCTL_HOST\")\nif (!JOBCTL_HOST) return [null,msg] \nconst JOBCTL_SERVICE_IP = JOBCTL_HOST.IP\nconst JOBCTL_SERVICE_HOST_HTTP_PORT = JOBCTL_HOST.HTTP_PORT\n\nmsg.joburl = `http://${JOBCTL_SERVICE_IP}:${JOBCTL_SERVICE_HOST_HTTP_PORT}/HEARTBEAT`\n\nmsg.cluster_service_uid = RED.util.procuuid\nreturn [msg,null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 80,
        "wires": [
            [
                "88c4142b09dff4e5"
            ],
            []
        ]
    },
    {
        "id": "aca4ee8b221fdf66",
        "type": "function",
        "z": "4d4915ce082a1010",
        "name": "UPDATE",
        "func": "if (msg.statusCode == \"200\") {\n    if (msg.payload) {\n        try {\n            msg.payload = JSON.parse(msg.payload)\n        } catch (error) {\n            return [null, msg]\n        }\n    }\n    return [msg, null]\n} else {\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 80,
        "wires": [
            [],
            [
                "d1f7a9a5ebc50bc4"
            ]
        ]
    },
    {
        "id": "d1f7a9a5ebc50bc4",
        "type": "function",
        "z": "4d4915ce082a1010",
        "name": "DELETE JOBCTL_HOST",
        "func": "global.set(\"JOBCTL_HOST\", null)\nreturn [msg, null]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 120,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "7dce50426a1c2ecb",
        "type": "subflow:b3da594ab22fa515",
        "z": "4d4915ce082a1010",
        "name": "",
        "x": 270,
        "y": 80,
        "wires": [
            [],
            [
                "d0e75f004f3cf6c3"
            ]
        ]
    },
    {
        "id": "eab7eab5a63d561b",
        "type": "catch",
        "z": "4d4915ce082a1010",
        "name": "CONNECT error",
        "scope": [
            "037bbac4f152dc89"
        ],
        "uncaught": false,
        "x": 840,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "771e91fbd62fd669",
        "type": "function",
        "z": "2d6a615a0f89e919",
        "name": "set-jobsession",
        "func": "\nconst date = new Date()\nconst jobsession = date.getFullYear() + (\"0\" + (date.getMonth() + 1)).slice(-2) + (\"0\" + (date.getDate())).slice(-2)\n\nconst retmsg = RED.util.setPropByPath(msg, \"topicTicket.param.jobsession\", jobsession)\nreturn retmsg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e4e20228d978a35d",
        "type": "inject",
        "z": "f01882c08732b397",
        "name": "get topic",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "30529b79c02a394f"
            ]
        ]
    },
    {
        "id": "88fda1c4f25cba11",
        "type": "debug",
        "z": "f01882c08732b397",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 440,
        "wires": []
    },
    {
        "id": "4e90783a35fceb8f",
        "type": "inject",
        "z": "f01882c08732b397",
        "name": "Sample Topic1",
        "props": [
            {
                "p": "topicTicket",
                "v": "{\t    \"topic\" : \"topic1\",\t    \"param\": {\t        \"hoge\": \"new\",\t        \"jobsession\": $millis()\t        }\t}\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "0b735aab2b4ad0d9"
            ]
        ]
    },
    {
        "id": "e61870e6384df480",
        "type": "subflow:375ee1d6cf6e3891",
        "z": "f01882c08732b397",
        "name": "addtopic",
        "env": [
            {
                "name": "actionType",
                "value": "addtopic",
                "type": "str"
            },
            {
                "name": "topicPath",
                "value": "payload.topic",
                "type": "str"
            }
        ],
        "x": 760,
        "y": 200,
        "wires": [
            [
                "938bc7c1342ffed9"
            ],
            [
                "ce7a61e15262697c"
            ]
        ]
    },
    {
        "id": "938bc7c1342ffed9",
        "type": "debug",
        "z": "f01882c08732b397",
        "name": "Success Add topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 200,
        "wires": []
    },
    {
        "id": "1337ddaae1e0b4f2",
        "type": "comment",
        "z": "f01882c08732b397",
        "name": "新規topicの登録",
        "info": "",
        "x": 120,
        "y": 160,
        "wires": []
    },
    {
        "id": "6f67feb8aaf36c3d",
        "type": "comment",
        "z": "f01882c08732b397",
        "name": "topicを取得して着手",
        "info": "",
        "x": 130,
        "y": 400,
        "wires": []
    },
    {
        "id": "d531f9b3819a76e3",
        "type": "comment",
        "z": "f01882c08732b397",
        "name": "topicを完了",
        "info": "",
        "x": 710,
        "y": 380,
        "wires": []
    },
    {
        "id": "878a855ba718978e",
        "type": "delay",
        "z": "f01882c08732b397",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 600,
        "wires": [
            [
                "af841315d383f29b"
            ]
        ]
    },
    {
        "id": "486842778ef1fa28",
        "type": "inject",
        "z": "f01882c08732b397",
        "name": "git Topic",
        "props": [
            {
                "p": "topicName",
                "v": "git",
                "vt": "str"
            },
            {
                "p": "payload.list",
                "v": "[\"A0000_0000\",\"B0000_0000\"]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 240,
        "wires": [
            [
                "094e0dc9b2a447d1"
            ]
        ]
    },
    {
        "id": "094e0dc9b2a447d1",
        "type": "subflow:b1626fc28a971f31",
        "z": "f01882c08732b397",
        "name": "",
        "env": [
            {
                "name": "outputPath",
                "value": "topicTicket.param.target",
                "type": "str"
            }
        ],
        "x": 280,
        "y": 240,
        "wires": [
            [
                "d9ac84b3b8313504"
            ]
        ]
    },
    {
        "id": "980fc44b5f89e93e",
        "type": "function",
        "z": "f01882c08732b397",
        "name": "set-topic",
        "func": "const topic = msg.topicName\nconst retmsg = RED.util.setPropByPath(msg, \"topicTicket.topic\", topic)\nreturn retmsg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "e61870e6384df480",
                "a119bdf0f5c1fc9c"
            ]
        ]
    },
    {
        "id": "30529b79c02a394f",
        "type": "subflow:131075747e8871f8",
        "z": "f01882c08732b397",
        "name": "",
        "x": 310,
        "y": 460,
        "wires": [
            [
                "af841315d383f29b"
            ],
            []
        ]
    },
    {
        "id": "ebc7c08433e303bb",
        "type": "subflow:1ec11fe81fee736c",
        "z": "f01882c08732b397",
        "name": "",
        "x": 710,
        "y": 440,
        "wires": [
            [
                "88fda1c4f25cba11"
            ],
            [
                "88fda1c4f25cba11"
            ]
        ]
    },
    {
        "id": "91e95533dea37675",
        "type": "subflow:4d4915ce082a1010",
        "z": "f01882c08732b397",
        "name": "",
        "x": 320,
        "y": 80,
        "wires": [
            [
                "32a99b940d7ff5c9"
            ],
            []
        ]
    },
    {
        "id": "af841315d383f29b",
        "type": "subflow:45018afdb676ae24",
        "z": "f01882c08732b397",
        "name": "task exec",
        "x": 520,
        "y": 460,
        "wires": [
            [
                "ebc7c08433e303bb"
            ],
            [
                "878a855ba718978e"
            ]
        ]
    },
    {
        "id": "32a99b940d7ff5c9",
        "type": "debug",
        "z": "f01882c08732b397",
        "name": "Success join",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 60,
        "wires": []
    },
    {
        "id": "160bd311df57a325",
        "type": "comment",
        "z": "f01882c08732b397",
        "name": "clusterへの参加",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "7acd49dfb101f914",
        "type": "inject",
        "z": "f01882c08732b397",
        "name": "CONNECT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "test",
        "payloadType": "str",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "91e95533dea37675"
            ]
        ]
    },
    {
        "id": "ce7a61e15262697c",
        "type": "debug",
        "z": "f01882c08732b397",
        "name": "Failed Add topic",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 240,
        "wires": []
    },
    {
        "id": "29b00c4fd66f0c87",
        "type": "inject",
        "z": "f01882c08732b397",
        "name": "git Topic",
        "props": [
            {
                "p": "topicName",
                "v": "git",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "81529646389f940b"
            ]
        ]
    },
    {
        "id": "81529646389f940b",
        "type": "file in",
        "z": "f01882c08732b397",
        "name": "read target",
        "filename": "/workspace/target.txt",
        "filenameType": "str",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 270,
        "y": 280,
        "wires": [
            [
                "eed827c2cffde494"
            ]
        ]
    },
    {
        "id": "d9ac84b3b8313504",
        "type": "subflow:2d6a615a0f89e919",
        "z": "f01882c08732b397",
        "name": "",
        "x": 440,
        "y": 240,
        "wires": [
            [
                "980fc44b5f89e93e"
            ]
        ]
    },
    {
        "id": "0b735aab2b4ad0d9",
        "type": "subflow:2d6a615a0f89e919",
        "z": "f01882c08732b397",
        "name": "",
        "x": 440,
        "y": 200,
        "wires": [
            [
                "e61870e6384df480"
            ]
        ]
    },
    {
        "id": "eed827c2cffde494",
        "type": "subflow:2d6a615a0f89e919",
        "z": "f01882c08732b397",
        "name": "",
        "x": 440,
        "y": 280,
        "wires": [
            [
                "1dcaf26e648cddba"
            ]
        ]
    },
    {
        "id": "1dcaf26e648cddba",
        "type": "function",
        "z": "f01882c08732b397",
        "name": "set-topic",
        "func": "const target = msg.payload\nconst topic = msg.topicName\nmsg.topicTicket.topic = topic\nmsg.topicTicket.param.target = target\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 280,
        "wires": [
            [
                "e61870e6384df480",
                "a119bdf0f5c1fc9c"
            ]
        ]
    },
    {
        "id": "a119bdf0f5c1fc9c",
        "type": "debug",
        "z": "f01882c08732b397",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 280,
        "wires": []
    },
    {
        "id": "f95507e7d1cc63f1",
        "type": "inject",
        "z": "dbd8abb392121dc1",
        "name": "Sample Topic1",
        "props": [
            {
                "p": "payload.topic",
                "v": "{\t    \"topic\" : \"topic1\",\t    \"param\": {\"hoge\":\"new\"}\t}\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "ef4c138a0cd71fa3"
            ]
        ]
    },
    {
        "id": "c803403e1bccf5d2",
        "type": "debug",
        "z": "dbd8abb392121dc1",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 420,
        "wires": []
    },
    {
        "id": "84d6fcc45f5b83e4",
        "type": "inject",
        "z": "dbd8abb392121dc1",
        "name": "Sample Topic2",
        "props": [
            {
                "p": "payload.topic",
                "v": "{\t    \"topic\" : \"topic2\",\t    \"param\": {\"hoge\":\"new\"}\t}\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "ef4c138a0cd71fa3"
            ]
        ]
    },
    {
        "id": "ef4c138a0cd71fa3",
        "type": "subflow:d6f01b04a12d7282",
        "z": "dbd8abb392121dc1",
        "name": "",
        "x": 380,
        "y": 420,
        "wires": [
            [
                "c803403e1bccf5d2"
            ]
        ]
    },
    {
        "id": "b258f9f392268ee6",
        "type": "comment",
        "z": "dbd8abb392121dc1",
        "name": "新規topicの登録",
        "info": "",
        "x": 140,
        "y": 340,
        "wires": []
    },
    {
        "id": "50ea0c396598ecc5",
        "type": "subflow:6399b4d8775a079a",
        "z": "dbd8abb392121dc1",
        "name": "",
        "x": 110,
        "y": 40,
        "wires": [
            [],
            [
                "5d96429efc574658"
            ]
        ]
    },
    {
        "id": "5d96429efc574658",
        "type": "debug",
        "z": "dbd8abb392121dc1",
        "name": "Success assigned",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 60,
        "wires": []
    }
]