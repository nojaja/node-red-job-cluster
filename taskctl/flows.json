[
    {
        "id": "df2ab3479f1af30a",
        "type": "tab",
        "label": "フロー 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "56d4506243eb3bc8",
        "type": "subflow",
        "name": "job-start-endpoint",
        "info": "rpc-asyncを受信します\r\n\r\n## **description**\r\nrpc-asyncで呼び出されるコールバック式の非同期WebAPIのendpointです  \r\n\r\nこのWebAPIでは双方向のWebAPIコールによって実現します  \r\nしたがって双方でendpointが公開可能な環境向けとしてlocalhost内でのみ動作します  \r\n\r\nこの処理によってWebAPIをコールされた時に、コールバック用のURLが渡されます  \r\nコールバックURLにアクセスすることによって処理が完了します  \r\n\r\n## **env**\r\n- **HOSTNAME**: 自分のホスト名を定義 \r\n- **NODE_RED_VERSION**:自分のNODE-REDのVERSIONを指定します   \r\n\r\n## **global**\r\nなし\r\n\r\n## **properties**\r\n- **actionType**: 処理の種別を指定します \r\n\r\n\r\n## **data structure**\r\n- **topicTicket**: json形式の下記を含んだ構造体\r\n```\r\ntopicTicket = {\r\n    topic: topicName,\r\n    uuid: RED.util.procuuid //クライアントのUUID\r\n}\r\n\r\n```\r\n## **input msg**\r\nなし\r\n\r\n## **output msg**\r\n`msg.req.params.topicTicket`: topicTicketデータ  \r\n`msg.topicTicket`: topicTicketデータ、JSON.parse(msg.req.params.topicTicket)  \r\n`msg.callbackhost`: コールバック用のURL  \r\n`msg.req.headers.x-callback`: コールバック用のURL  \r\n\r\n\r\n## **Receive Request**\r\nx-callbackで送信したURLで待機します。  \r\nGET  \r\n`/${actionType}/:topicTicket`  \r\n\r\n\r\n## **Receive Request header**\r\nなし\r\n\r\n## **Receive Response**\r\nJSON形式で下記を返却します\r\n```\r\n{\r\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\r\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\r\n    \"topicTicket\": msg.topicTicket,\r\n    \"callbackhost\": msg.callbackhost\r\n}\r\n```\r\n\r\n",
        "category": "job",
        "in": [],
        "out": [
            {
                "x": 960,
                "y": 220,
                "wires": [
                    {
                        "id": "cd1ed3ded782cc75",
                        "port": 0
                    }
                ]
            },
            {
                "x": 960,
                "y": 280,
                "wires": [
                    {
                        "id": "8b8aaab557a380be",
                        "port": 0
                    },
                    {
                        "id": "cd1ed3ded782cc75",
                        "port": 0
                    },
                    {
                        "id": "99ad089b91cf6c3b",
                        "port": 0
                    },
                    {
                        "id": "1f64b61d5f2b2af5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "actionType",
                "type": "str",
                "value": "exec"
            },
            {
                "name": "endpoint",
                "type": "env",
                "value": "/${actionType}",
                "ui": {
                    "type": "hide"
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-start-endpoint",
            "type": "job-cluster-start-endpoint",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "outputLabels": [
            "payload",
            "trace-log"
        ],
        "icon": "node-red/inject.svg",
        "status": {
            "x": 920,
            "y": 340,
            "wires": [
                {
                    "id": "28d5262e05defa33",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "a054d80f86a78547",
        "type": "subflow",
        "name": "job-end-callback",
        "info": "rpc-asyncにコールバックを送信します\r\n\r\n## **description**\r\nrpc-asyncで呼び出されるコールバック式の非同期WebAPIのコールバック処理です  \r\n\r\nこのWebAPIでは双方向のWebAPIコールによって実現します  \r\nしたがって双方でendpointが公開可能な環境向けとしてlocalhost内でのみ動作します  \r\n\r\nrpc-asyncによってWebAPIをコールされた時に、job-start-endpointにコールバック用のURLが渡されます  \r\nコールバックURLにアクセスすることによって処理が完了します  \r\n\r\n## **env**\r\n- **HOSTNAME**: 自分のホスト名を定義 \r\n- **NODE_RED_VERSION**:自分のNODE-REDのVERSIONを指定します   \r\n\r\n## **global**\r\nなし\r\n\r\n## **properties**\r\n- **topicTicket_key**: 処理の種別を指定します \r\n- **callbackPath**: msg配下のcallbackURLが格納されている場所を指定します  \r\n\r\n## **data structure**\r\nなし\r\n\r\n## **input msg**\r\nなし\r\n\r\n## **output msg**\r\n`msg.callbackhost`: コールバック用のURL  \r\n\r\n## **Receive Request**\r\nx-callbackで送信したURLにアクセスします\r\n\r\n## **Receive Request header**\r\nなし\r\n\r\n## **Receive Response**\r\nJSON形式で下記を返却します\r\n```\r\n{\r\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\r\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\r\n    \"topic\": msg.topic,\r\n    \"uuid\": msg.uuid\r\n}\r\n```\r\n\r\n",
        "category": "job",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "c36d55d859478eea"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 780,
                "y": 40,
                "wires": [
                    {
                        "id": "9cdc11e8a03bb722",
                        "port": 0
                    }
                ]
            },
            {
                "x": 780,
                "y": 100,
                "wires": [
                    {
                        "id": "9cdc11e8a03bb722",
                        "port": 0
                    },
                    {
                        "id": "c36d55d859478eea",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicTicket_key",
                "type": "str",
                "value": "topicTicket"
            },
            {
                "name": "callbackPath",
                "type": "str",
                "value": "callbackhost"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-end-callback",
            "type": "job-cluster-end-callback",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "outputLabels": [
            "payload",
            "trace-log"
        ],
        "icon": "node-red/arrow-in.svg",
        "status": {
            "x": 740,
            "y": 160,
            "wires": [
                {
                    "id": "e995ca91841e987f",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "cd185f8f533e0f2d",
        "type": "subflow",
        "name": "logger",
        "info": "サイドバーの「デバッグ」タブに、選択したメッセージプロパティの値を表示します。\r\n設定により、ランタイムログへの出力も可能です。\r\nデフォルトの表示対象は`msg.payload`ですが、設定により、指定したプロパティ、メッセージ全体、もしくは、JSONata式の評価結果を出力できます。\r\n\r\n## 詳細\r\n「デバッグ」サイドバーは受け取ったメッセージの階層構造を表示する機能を備えます。この機能によりメッセージの構造を容易に理解できます。\r\n\r\nJavaScriptオブジェクトと配列は必要に応じて折り畳んだり展開したりできます。バッファオブジェクトを生データとして表示したり、表現可能な場合に文字列として表示したりすることも可能です。\r\n\r\nメッセージを受信した時刻、送信ノード、メッセージの型に関する情報を「デバッグ」サイドバーに表示されたメッセージに付随して表示します。送信元ノードのIDを選択すると、ワークスペース内の対応ノードを確認できます。\r\n\r\n出力の有効/無効はノード上のボタンで切り替えられます。フロー上で未使用のdebugノードは、無効化するか削除することを推奨します。\r\n\r\n全てのメッセージをランタイムログに送付、もしくは、(32文字の)短いデータをdebugノードの下のステータステキストに表示することも可能です。",
        "category": "job",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "546cf87e3978c6e6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 40,
                "wires": [
                    {
                        "id": "8b05743651ac39ce",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "logLevel",
                "type": "str",
                "value": "info",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "ja": "info"
                                },
                                "v": "info"
                            },
                            {
                                "l": {
                                    "ja": "warn"
                                },
                                "v": "warn"
                            },
                            {
                                "l": {
                                    "ja": "error"
                                },
                                "v": "error"
                            }
                        ]
                    }
                }
            },
            {
                "name": "logName",
                "type": "str",
                "value": "system"
            },
            {
                "name": "logPath",
                "type": "env",
                "value": "LOGPATH"
            },
            {
                "name": "removeColor",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "outputMsgObject",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "ja": "オブジェクト全体"
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-logger",
            "type": "job-cluster-logger",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#87A980",
        "icon": "node-red/file-out.svg"
    },
    {
        "id": "375ee1d6cf6e3891",
        "type": "subflow",
        "name": "addtopic",
        "info": "\r\n## jobctlにtopicを登録します。\r\n\r\n## データ構造\r\n```\r\n{\r\n    \"topic\" : \"topic-name\",\r\n    \"param\": {\r\n        \"paramA\": \"A\",\r\n        \"paramB\": \"B\",\r\n        \"jobsession\": $millis()\r\n        }\r\n}\r\n```",
        "category": "job",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "a72d2803344a446d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 40,
                "wires": [
                    {
                        "id": "ab5c9b3893934684",
                        "port": 0
                    }
                ]
            },
            {
                "x": 850,
                "y": 100,
                "wires": [
                    {
                        "id": "ab5c9b3893934684",
                        "port": 1
                    }
                ]
            },
            {
                "x": 860,
                "y": 160,
                "wires": [
                    {
                        "id": "ab5c9b3893934684",
                        "port": 0
                    },
                    {
                        "id": "ab5c9b3893934684",
                        "port": 1
                    },
                    {
                        "id": "fc01a190e21bcf85",
                        "port": 0
                    },
                    {
                        "id": "a72d2803344a446d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicTicketPath",
                "type": "str",
                "value": "payload.topic"
            },
            {
                "name": "endpointport",
                "type": "str",
                "value": "1888"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-addtopic",
            "type": "job-cluster-addtopic",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "inputLabels": [
            "topic"
        ],
        "outputLabels": [
            "Success",
            "Failed",
            "trace-log"
        ],
        "icon": "node-red/arrow-in.svg",
        "status": {
            "x": 820,
            "y": 220,
            "wires": [
                {
                    "id": "bbfe9b0496ec60b7",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "45018afdb676ae24",
        "type": "subflow",
        "name": "rpc-async",
        "info": "WebAPIをコールバック式の非同期でコールします\r\n\r\n## **description**\r\ntask execなどローカル内での呼び出しに利用  \r\n\r\nこのWebAPIでは双方向のWebAPIコールによって実現します  \r\nしたがって双方でendpointが公開可能な環境向けとしてlocalhost内でのみ動作します  \r\n\r\nこの処理によってWebAPIをコールすると相手には、コールバック用のURLが通知されます  \r\n相手は受け取ったコールバックURLにアクセスすることによって処理が完了します  \r\n\r\n## **env**\r\n- **HOSTNAME**: 自分のホスト名を定義 \r\n- **PORT**: 自分のポートを定義 \r\n- **NODE_RED_VERSION**:自分のNODE-REDのVERSIONを指定します   \r\n\r\n## **global**\r\nなし\r\n\r\n## **properties**\r\n- **actionType**: 処理の種別を指定します \r\n- **topicTicket_key**: msg直下のtopicTicketのkey名を指定します  \r\n- **endpointport**: 呼び出し先のポートを定義します \r\n\r\n## **data structure**\r\n- **topicTicket**: json形式の下記を含んだ構造体\r\n```\r\ntopicTicket = {\r\n    topic: topicName,\r\n    uuid: RED.util.procuuid //クライアントのUUID\r\n}\r\n\r\n```\r\n\r\n## **Send Request**\r\nGET  \r\n`http://localhost:${endpointport}/${actionType}/${topicTicket}`  \r\ntopicTicketはJSON.stringify()された文字列  \r\n\r\n## **Send Request header**\r\n- **x-callback**:  \r\n```\r\nhttp://localhost:${PORT}/callback/${topicTicket.topic}/${topicTicket.uuid}\r\n```\r\n\r\n## **Send Response**\r\nJSON形式として\r\n```\r\n{\r\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\r\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\r\n    \"topicTicket\": msg.topicTicket,\r\n    \"callbackhost\": msg.callbackhost\r\n}\r\n```\r\nといった内容を期待します。  \r\n受信データは\r\n```\r\nmsg.payload = JSON.parse(msg.payload)\r\n```\r\nを行います\r\n\r\n## **Receive Request**\r\nx-callbackで送信したURLで待機します。  \r\nGET  \r\n`http://localhost:${port}/callback/${topic}/${uuid}`  \r\n結果の精査は特に行いません。\r\n\r\n## **Receive Request header**\r\nなし\r\n\r\n## **Receive Response**\r\nJSON形式で下記を返却します\r\n```\r\n{\r\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\r\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\r\n    \"topic\": msg.topic,\r\n    \"uuid\": msg.uuid\r\n}\r\n```\r\n",
        "category": "job",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "a9fa9c32d27f7f10"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 320,
                "wires": [
                    {
                        "id": "194d7930b95721c2",
                        "port": 0
                    }
                ]
            },
            {
                "x": 820,
                "y": 120,
                "wires": [
                    {
                        "id": "b861d902d0337a8d",
                        "port": 1
                    }
                ]
            },
            {
                "x": 800,
                "y": 60,
                "wires": [
                    {
                        "id": "b861d902d0337a8d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "actionType",
                "type": "str",
                "value": "exec"
            },
            {
                "name": "callback_endpoint",
                "type": "str",
                "value": "/callback/:topic/:uuid",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "endpointport",
                "type": "str",
                "value": "1880"
            },
            {
                "name": "topicTicket_key",
                "type": "str",
                "value": "topicTicket"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-rpc-async",
            "type": "job-cluster-rpc-async",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "outputLabels": [
            "OK",
            "NG",
            ""
        ],
        "icon": "node-red/link-out.svg",
        "status": {
            "x": 800,
            "y": 380,
            "wires": [
                {
                    "id": "1e30dda2b9e0fcba",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "2af088b891412a7f",
        "type": "subflow",
        "name": "split-array",
        "info": "リストを分解して、後続に送ります\r\n\r\n## **description**\r\n\r\n\r\n## **env**\r\nなし \r\n\r\n## **global**\r\nなし  \r\n\r\n## **properties**\r\n- **inputArrayPath**: msg配下の対象のArrayの場所を指定します \r\n- **outputPath**: 分解した要素を格納するmsg配下の場所を指定します \r\n \r\n## data structure\r\nなし \r\n\r\n## **input msg**\r\nなし\r\n\r\n## **output msg**\r\noutputPathで指定した場所に要素が追加されます。\r\n",
        "category": "sequence",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "65773947d3956d31"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 40,
                "wires": [
                    {
                        "id": "65773947d3956d31",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "inputArrayPath",
                "type": "str",
                "value": "payload.list"
            },
            {
                "name": "outputPath",
                "type": "str",
                "value": "topicTicket.param.target"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-split-array",
            "type": "job-cluster-split-array",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#E2D96E",
        "icon": "node-red/split.svg",
        "status": {
            "x": 360,
            "y": 120,
            "wires": [
                {
                    "id": "ff7ea1439bf6d7d3",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "28b838dd0d60646d",
        "type": "subflow",
        "name": "set-jobsession",
        "info": "jobsessionを生成します。\r\n\r\n## **description**\r\nyyyymmddhh24形式のIDを生成します。\r\n\r\n## **env**\r\nなし \r\n\r\n## **global**\r\nなし  \r\n\r\n## **properties**\r\nなし \r\n \r\n## data structure\r\nなし \r\n\r\n## **input msg**\r\nなし\r\n\r\n## **output msg**\r\n`msg.topicTicket.param.jobsession`にIDが追加されます。\r\n",
        "category": "job",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "7020fe11546b61c6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 40,
                "wires": [
                    {
                        "id": "7020fe11546b61c6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "jobsessionPath",
                "type": "str",
                "value": "topicTicket.param.jobsession"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-set-jobsession",
            "type": "job-cluster-set-jobsession",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DEB887",
        "icon": "font-awesome/fa-plus-circle",
        "status": {
            "x": 320,
            "y": 120,
            "wires": [
                {
                    "id": "d889d71acabee873",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "7e1bc880aa606898",
        "type": "subflow",
        "name": "exists-file",
        "info": "ファイルもしくはフォルダの存在チェックをします  \r\n\r\n## **description**\r\nファイルもしくはフォルダの存在チェックをします \r\n\r\n## **env**\r\nなし \r\n\r\n## **global**\r\nなし  \r\n\r\n## **properties**\r\n- **targetKeyPath **: msg配下の、親フォルダ配下のpath、もしくはファイル名が格納されている 変数の場所を指定します  \r\n- **basePath **: 親フォルダを指定します  \r\n\r\n## data structure\r\nなし \r\n\r\n## **input msg**\r\nなし\r\n\r\n## **output msg**\r\n### output1\r\n対象が見つかった場合に出力されます  \r\n\r\n`msg[node.name-node.id}`にステータスが格納されます \r\n\r\n### output2\r\n対象が見つからない場合に出力されます  \r\n設定値はoutput1と同じです\r\n\r\n### output3\r\nトレースログを出力します  \r\n",
        "category": "job",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "3988a6601981cb5c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 550,
                "y": 40,
                "wires": [
                    {
                        "id": "3988a6601981cb5c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 560,
                "y": 100,
                "wires": [
                    {
                        "id": "3988a6601981cb5c",
                        "port": 1
                    }
                ]
            },
            {
                "x": 560,
                "y": 160,
                "wires": [
                    {
                        "id": "3988a6601981cb5c",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "targetKeyPath",
                "type": "str",
                "value": "payload"
            },
            {
                "name": "basePath",
                "type": "str",
                "value": "/workspace"
            }
        ],
        "meta": {
            "module": "node-red-contrib-exists-file",
            "type": "exists-file",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DDAA99",
        "outputLabels": [
            "found",
            "not found",
            "trace-log"
        ],
        "icon": "node-red/watch.svg",
        "status": {
            "x": 520,
            "y": 220,
            "wires": [
                {
                    "id": "b9c2875a59bb3c60",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "fb38bea55c8dc62c",
        "type": "subflow",
        "name": "store-limit",
        "info": "空き容量で流量を制御します\r\n\r\n## **description**\r\n空き容量が指定したサイズ以下の場合にoutput1を返します  \r\n実行にはdfコマンドが必要です  \r\n## **env**\r\nなし \r\n\r\n## **global**\r\nなし  \r\n\r\n## **properties**\r\n- **targetkeypath **: msg配下のtargetのフォルダのpathが格納されている場所を指定  \r\n- **limitSize **: output1を返す容量を設定します、byte指定  \r\n- **wait **: 容量が足りない場合に待つかどうかを指定しますtrueの場合は5分間隔でチェックします  \r\n \r\n## data structure\r\nなし \r\n\r\n## **input msg**\r\nなし\r\n\r\n## **output msg**\r\n### output1\r\n容量が設定値以上あった場合に出力されます\r\n\r\n`msg.df`にdfの結果が格納されます  \r\n```\r\n{\r\n        size: Number(match[1]),\r\n        used: Number(match[2]),\r\n        available: Number(match[3]),\r\n        usePer: Number(match[4])\r\n    }\r\n```  \r\n`msg.exec`に実行したコマンドが格納されます  \r\n`msg[node.name-node.id}`にステータスが格納されます  \r\n`msg._payload`の内容は消去されます   \r\n\r\n### output2\r\n容量が設定値以下場合に出力されます\r\n設定値はoutput1と同じです\r\n\r\n\r\n",
        "category": "job",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "5f74ccae462df2fb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 40,
                "wires": [
                    {
                        "id": "ba6b06c9df74954b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 840,
                "y": 100,
                "wires": [
                    {
                        "id": "ba6b06c9df74954b",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "targetKeyPath",
                "type": "str",
                "value": "payload"
            },
            {
                "name": "limitSize",
                "type": "num",
                "value": "1000000"
            },
            {
                "name": "wait",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {
            "module": "node-red-contrib-store-limit",
            "type": "store-limit",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#E6E0F8",
        "icon": "node-red/trigger.svg",
        "status": {
            "x": 600,
            "y": 200,
            "wires": [
                {
                    "id": "161e3e352b026761",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "974ea964a47943fe",
        "type": "subflow",
        "name": "remove-file",
        "info": "ファイルもしくはフォルダを削除します\r\n\r\n## **description**\r\n指定したファイル、フォルダを削除します  \r\n実行にはrmコマンドが必要です  \r\n\r\n## **env**\r\nなし \r\n\r\n## **global**\r\nなし  \r\n\r\n## **properties**\r\n- **targetKeyPath **: msg配下の、親フォルダ配下のpath、もしくはファイル名が格納されている 変数の場所を指定します  \r\n- **basePath **: 親フォルダを指定します  \r\n\r\n## data structure\r\nなし \r\n\r\n## **input msg**\r\nなし\r\n\r\n## **output msg**\r\n### output1\r\n削除に成功した場合に出力されます  \r\n\r\n`msg.targetpath`に削除対象のpathが格納されます\r\n`msg.exec`に実行したコマンドが格納されます  \r\n`msg[node.name-node.id}`にステータスが格納されます  \r\n`msg._payload`の内容は消去されます   \r\n\r\n### output2\r\n削除対象が見つからない場合に出力されます  \r\n設定値はoutput1と同じです\r\n\r\n### output3\r\n削除に失敗した場合に出力されます  \r\n設定値はoutput1と同じです\r\n\r\n### output4\r\nトレースログを出力します  \r\n",
        "category": "job",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "f7c639a74fb85c05"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 100,
                "wires": [
                    {
                        "id": "1b9cccfd8c2489f1",
                        "port": 0
                    }
                ]
            },
            {
                "x": 900,
                "y": 160,
                "wires": [
                    {
                        "id": "f7c639a74fb85c05",
                        "port": 1
                    }
                ]
            },
            {
                "x": 890,
                "y": 220,
                "wires": [
                    {
                        "id": "1b9cccfd8c2489f1",
                        "port": 1
                    },
                    {
                        "id": "f7c639a74fb85c05",
                        "port": 1
                    }
                ]
            },
            {
                "x": 900,
                "y": 280,
                "wires": [
                    {
                        "id": "f7c639a74fb85c05",
                        "port": 2
                    },
                    {
                        "id": "8b14301da207b917",
                        "port": 0
                    },
                    {
                        "id": "8b14301da207b917",
                        "port": 1
                    },
                    {
                        "id": "9c960505583c108f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "targetKeyPath",
                "type": "str",
                "value": "payload.param.target"
            },
            {
                "name": "basePath",
                "type": "str",
                "value": "/workspace"
            }
        ],
        "meta": {
            "module": "node-red-contrib-remove-file",
            "type": "remove-file",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DDAA99",
        "outputLabels": [
            "success",
            "not found",
            "error",
            "trace-log"
        ],
        "icon": "font-awesome/fa-trash-o",
        "status": {
            "x": 860,
            "y": 40,
            "wires": [
                {
                    "id": "396a04d644c222e2",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "1f64b61d5f2b2af5",
        "type": "http in",
        "z": "56d4506243eb3bc8",
        "name": "",
        "url": "${endpoint}",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "99ad089b91cf6c3b"
            ]
        ]
    },
    {
        "id": "99ad089b91cf6c3b",
        "type": "change",
        "z": "56d4506243eb3bc8",
        "name": "set parameter",
        "rules": [
            {
                "t": "set",
                "p": "topicTicket",
                "pt": "msg",
                "to": "req.body",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "callbackhost",
                "pt": "msg",
                "to": "req.headers.x-callback",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 160,
        "wires": [
            [
                "cd1ed3ded782cc75"
            ]
        ]
    },
    {
        "id": "413a1b0b82f06f08",
        "type": "http response",
        "z": "56d4506243eb3bc8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 960,
        "y": 160,
        "wires": []
    },
    {
        "id": "8b8aaab557a380be",
        "type": "function",
        "z": "56d4506243eb3bc8",
        "name": "assing result",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topicTicket\": msg.topicTicket,\n    \"callbackhost\": msg.callbackhost\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 160,
        "wires": [
            [
                "413a1b0b82f06f08"
            ]
        ]
    },
    {
        "id": "cd1ed3ded782cc75",
        "type": "function",
        "z": "56d4506243eb3bc8",
        "name": "JSON.parse",
        "func": "if (msg.topicTicket) {\n    try {\n        msg.payload = JSON.parse(msg.topicTicket)\n        const status = { fill: \"green\", shape: \"dot\", text: `target: ${msg.payload.param.target}`}\n        node.status(status)\n        msg[`${node.name}-${node.id}`] = {\n            id: node.id,\n            name: node.name,\n            payload: msg.payload,\n            status: status\n        }\n    } catch (error) {\n        const status = { fill: \"yellow\", shape: \"dot\", text: \"not json data\" }\n        node.status(status)\n        msg[`${node.name}-${node.id}`] = {\n            id: node.id,\n            name: node.name,\n            payload: msg.payload,\n            status: status\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 160,
        "wires": [
            [
                "8b8aaab557a380be"
            ]
        ]
    },
    {
        "id": "28d5262e05defa33",
        "type": "status",
        "z": "56d4506243eb3bc8",
        "name": "",
        "scope": null,
        "x": 770,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "c36d55d859478eea",
        "type": "function",
        "z": "a054d80f86a78547",
        "name": "generate_url",
        "func": "\nconst callbackPath = env.get(\"callbackPath\")\n\nconst callbackhost = RED.util.getPropByPath(msg, callbackPath)\n\nmsg.callbackhost = callbackhost\n\nconst status = { fill: \"green\", shape: \"dot\", text: `connect: ${callbackhost}` }\nnode.status(status)\nmsg[`${node.name}-${node.id}`] = {\n    id: node.id,\n    name: node.name,\n    payload: msg.payload,\n    status: status\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 40,
        "wires": [
            [
                "9cdc11e8a03bb722"
            ]
        ]
    },
    {
        "id": "9cdc11e8a03bb722",
        "type": "http request",
        "z": "a054d80f86a78547",
        "name": "callback",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{callbackhost}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "e995ca91841e987f",
        "type": "status",
        "z": "a054d80f86a78547",
        "name": "",
        "scope": [
            "c36d55d859478eea"
        ],
        "x": 600,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "8b05743651ac39ce",
        "type": "function",
        "z": "cd185f8f533e0f2d",
        "name": "logger_proc",
        "func": "//const uid_key = env.get(\"logUID_Key\")\n//const uid = msg[uid_key] || msg._msgid\nconst date = new Date()\nconst uid = date.getFullYear() + (\"0\" + (date.getMonth() + 1)).slice(-2) + (\"0\" + (date.getDate())).slice(-2)\n\nconst logLevel = env.get(\"logLevel\")\nconst logName = env.get(\"logName\")\nconst logPath = env.get(\"logPath\")\nconst filename = `${logName}${logLevel}.log`\nmsg.logFilePath = path.join(logPath, uid, filename)\n\nconst outputMsgObject = env.get(\"outputMsgObject\")\nconst msg2 = RED.util.cloneMessage(msg)\nif (outputMsgObject) {\n    msg2.payload = JSON.stringify(msg);\n}\n//node.name = logName\n//if (logLevel == \"info\") node.warn(msg.consoleout)\n//if (logLevel == \"warn\") node.warn(msg.consoleout)\n//if (logLevel == \"error\") node.error(msg.consoleout)\nreturn [msg,msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 570,
        "y": 60,
        "wires": [
            [],
            [
                "5dfac259ecc0927f",
                "7e0a41b86051ec87"
            ]
        ]
    },
    {
        "id": "5dfac259ecc0927f",
        "type": "file",
        "z": "cd185f8f533e0f2d",
        "name": "logout",
        "filename": "logFilePath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 790,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7e0a41b86051ec87",
        "type": "debug",
        "z": "cd185f8f533e0f2d",
        "name": "${logName}",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 160,
        "wires": []
    },
    {
        "id": "4b21eb6d96357c05",
        "type": "function",
        "z": "cd185f8f533e0f2d",
        "name": "remove Color",
        "func": "const regex = /\\x1b[[0-9;]*m/g\nconst buf = (typeof msg.payload === 'object') ? msg.payload.toString() : msg.payload\nmsg.payload = buf.replace(regex, '')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "8b05743651ac39ce"
            ]
        ]
    },
    {
        "id": "546cf87e3978c6e6",
        "type": "switch",
        "z": "cd185f8f533e0f2d",
        "name": "",
        "property": "removeColor",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 60,
        "wires": [
            [
                "4b21eb6d96357c05"
            ],
            [
                "8b05743651ac39ce"
            ]
        ]
    },
    {
        "id": "a72d2803344a446d",
        "type": "function",
        "z": "375ee1d6cf6e3891",
        "name": "generate_url",
        "func": "const endpointport = env.get(\"endpointport\")\n\nconst topicTicketPath = env.get(\"topicTicketPath\")\n//const topicTicket = encodeURIComponent(JSON.stringify(RED.util.getPropByPath(msg, topicTicketPath)))\nmsg.payload = JSON.stringify(RED.util.getPropByPath(msg, topicTicketPath))\n//msg.joburl = `http://localhost:${endpointport}/addtopic/${topicTicket}`\nmsg.joburl = `http://localhost:${endpointport}/addtopic`\n//msg.topic = topicTicket\n\nconst status = { fill: \"green\", shape: \"dot\", text: `connect: ${msg.joburl}` }\nnode.status(status)\nmsg[`${node.name}-${node.id}`] = {\n    id: node.id,\n    name: node.name,\n    payload: msg.payload,\n    status: status\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "fc01a190e21bcf85"
            ]
        ]
    },
    {
        "id": "fc01a190e21bcf85",
        "type": "http request",
        "z": "375ee1d6cf6e3891",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{joburl}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "ab5c9b3893934684"
            ]
        ]
    },
    {
        "id": "ab5c9b3893934684",
        "type": "function",
        "z": "375ee1d6cf6e3891",
        "name": "JSON.parse",
        "func": "if (msg.statusCode == \"200\") {\n    if (msg.payload && (typeof msg.payload === \"string\" || msg.payload instanceof String)) {\n        try {\n            msg.payload = JSON.parse(msg.payload)\n            const status = { fill: \"green\", shape: \"dot\", text: `${msg.payload.topic.topic}` }\n            node.status(status)\n            msg[`${node.name}-${node.id}`] = {\n                id: node.id,\n                name: node.name,\n                payload: msg.payload,\n                status: status\n            }\n        } catch (error) {\n            const status = { fill: \"yellow\", shape: \"dot\", text: \"not json data\" }\n            node.status(status)\n            msg[`${node.name}-${node.id}`] = {\n                id: node.id,\n                name: node.name,\n                payload: msg.payload,\n                status: status\n            }\n        }\n    } else {\n        const status = { fill: \"green\", shape: \"dot\", text: `${msg.payload.topic.topic}` }\n        node.status(status)\n\n    }\n    return [msg, null]\n} else {\n    const status = { fill: \"red\", shape: \"dot\", text: `statusCode: ${msg.statusCode}` }\n    node.status(status)\n    msg[`${node.name}-${node.id}`] = {\n        id: node.id,\n        name: node.name,\n        payload: msg.payload,\n        status: status\n    }\n}\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "bbfe9b0496ec60b7",
        "type": "status",
        "z": "375ee1d6cf6e3891",
        "name": "",
        "scope": null,
        "x": 710,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "fe5cdfa3977befd1",
        "type": "http in",
        "z": "45018afdb676ae24",
        "name": "endpoint",
        "url": "${callback_endpoint}",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "194d7930b95721c2"
            ]
        ]
    },
    {
        "id": "194d7930b95721c2",
        "type": "change",
        "z": "45018afdb676ae24",
        "name": "set parameter",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "req.params.topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "uuid",
                "pt": "msg",
                "to": "req.params.uuid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 220,
        "wires": [
            [
                "0b6095c8f7667216"
            ]
        ]
    },
    {
        "id": "410889c1e32a785c",
        "type": "http response",
        "z": "45018afdb676ae24",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 820,
        "y": 220,
        "wires": []
    },
    {
        "id": "a9fa9c32d27f7f10",
        "type": "function",
        "z": "45018afdb676ae24",
        "name": "generate_url",
        "func": "const port = env.get(\"PORT\")\nconst endpointport = env.get(\"endpointport\")\n\nconst action = env.get(\"actionType\")\n\n//RED.util.getPropByPath(msg, topicPath)\nconst topicTicket_key = env.get(\"topicTicket_key\")\nconst topicTicket = RED.util.getPropByPath(msg, topicTicket_key)//{topic: \"\",param: { }}\n//const data = encodeURIComponent(JSON.stringify(topicTicket))\nmsg.payload = JSON.stringify(topicTicket)\nmsg.callbackurl = `http://localhost:${port}/callback/${topicTicket.topic}/${RED.util.procuuid}`\n//msg.joburl = `http://localhost:${endpointport}/${action}/${data}`\nmsg.joburl = `http://localhost:${endpointport}/${action}`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 100,
        "wires": [
            [
                "7479f711071af9bc"
            ]
        ]
    },
    {
        "id": "7479f711071af9bc",
        "type": "http request",
        "z": "45018afdb676ae24",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{joburl}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-callback",
                "valueType": "msg",
                "valueValue": "callbackurl"
            }
        ],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "b861d902d0337a8d",
                "cb4d21ee1baee701"
            ]
        ]
    },
    {
        "id": "0b6095c8f7667216",
        "type": "function",
        "z": "45018afdb676ae24",
        "name": "Response-Page",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topic\": msg.topic,\n    \"uuid\": msg.uuid\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 220,
        "wires": [
            [
                "410889c1e32a785c"
            ]
        ]
    },
    {
        "id": "b861d902d0337a8d",
        "type": "function",
        "z": "45018afdb676ae24",
        "name": "JSON.parse",
        "func": "if (msg.statusCode == \"200\") {\n    if (msg.payload) {\n        try {\n            msg.payload = JSON.parse(msg.payload)\n        } catch (error) {\n        }\n    }\n    return [msg, null]\n} else {\n\n}\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 100,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "cb4d21ee1baee701",
        "type": "job-cluster-logger",
        "z": "45018afdb676ae24",
        "name": "",
        "logLevel": "info",
        "logName": "system",
        "logPath": {
            "type": "env",
            "value": "LOGPATH"
        },
        "removeColor": true,
        "outputMsgObject": false,
        "x": 650,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1e30dda2b9e0fcba",
        "type": "status",
        "z": "45018afdb676ae24",
        "name": "",
        "scope": null,
        "x": 670,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "65773947d3956d31",
        "type": "function",
        "z": "2af088b891412a7f",
        "name": "split-array",
        "func": "const inputArrayPath = env.get(\"inputArrayPath\") //ex.msg.payload.topic \nconst list = RED.util.getPropByPath(msg, inputArrayPath)//{topic: \"\",param: { }}\nconst outputPath = env.get(\"outputPath\") //ex.msg.payload.topic \n\nfor (const key in list) {\n    const retmsg = RED.util.setPropByPath(msg, outputPath, list[key])\n    node.send(retmsg);\n}\n\n//node.done();\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "ff7ea1439bf6d7d3",
        "type": "status",
        "z": "2af088b891412a7f",
        "name": "",
        "scope": null,
        "x": 230,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7020fe11546b61c6",
        "type": "function",
        "z": "28b838dd0d60646d",
        "name": "set-jobsession",
        "func": "const date = new Date()\nconst jobsession = date.getFullYear() + (\"0\" + (date.getMonth() + 1)).slice(-2) + (\"0\" + (date.getDate())).slice(-2) + (\"0\" + (date.getHours())).slice(-2) \nconst jobsessionPath = env.get(\"jobsessionPath\") //ex.msg.payload.topic \nconst status = { fill: \"green\", shape: \"dot\", text: `${jobsession}` }\nnode.status(status)\nreturn RED.util.setPropByPath(msg, jobsessionPath, jobsession)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d889d71acabee873",
        "type": "status",
        "z": "28b838dd0d60646d",
        "name": "",
        "scope": null,
        "x": 210,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "3988a6601981cb5c",
        "type": "function",
        "z": "7e1bc880aa606898",
        "name": "ファイル存在チェック",
        "func": "const targetKeyPath = env.get(\"targetKeyPath\")\nconst target = RED.util.getPropByPath(msg, targetKeyPath)\n\nconst basePath = env.get(\"basePath\")\nconst targetpath = path.join(basePath, target)\n\ntry {\n    if (fs.existsSync(targetpath)) {\n        const status = { fill: \"green\", shape: \"dot\", text: `exists: ${targetpath}` }\n        node.status(status)\n        msg[`${node.name}-${node.id}`] = {\n            id: node.id,\n            name: node.name,\n            payload: `${targetpath}が見つかった`,\n            status: status\n        } \n        node.log(`${targetpath}が見つかった`)\n        return [msg, null, null]\n    } else {\n        const status = { fill: \"yellow\", shape: \"dot\", text: `not exists: ${targetpath}` }\n        node.status(status)\n        msg[`${node.name}-${node.id}`] = {\n            id: node.id,\n            name: node.name,\n            payload: `${targetpath}が見つからない`,\n            status: status\n        }\n        node.log(`${targetpath}が見つからない`)\n        return [null, msg, null]\n    }\n} catch (error) {\n    const status = { fill: \"red\", shape: \"dot\", text: `error: ${targetpath}` }\n    node.status(status)\n    msg[`${node.name}-${node.id}`] = {\n        id: node.id,\n        name: node.name,\n        payload: `error ${targetpath}`,\n        error: error,\n        status: status\n    }\n    node.error(`${targetpath} error: ${error}`, error)\n    return [null, null, msg]\n};\n\n\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 280,
        "y": 40,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "b9c2875a59bb3c60",
        "type": "status",
        "z": "7e1bc880aa606898",
        "name": "",
        "scope": null,
        "x": 350,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "5f74ccae462df2fb",
        "type": "function",
        "z": "fb38bea55c8dc62c",
        "name": "generate_cmd",
        "func": "const targetKeyPath = env.get(\"targetKeyPath\")\nconst targetpath = RED.util.getPropByPath(msg, targetKeyPath)\n\nmsg.exec = `df ${targetpath}`\nmsg._payload = msg.payload\n\nconst status = { fill: \"green\", shape: \"dot\", text: `df: ${targetpath}` }\nnode.status(status)\nmsg[`${node.name}-${node.id}`] = {\n    id: node.id,\n    name: node.name,\n    exec: msg.exec,\n    status: status\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 40,
        "wires": [
            [
                "aefe0952138e6e84"
            ]
        ]
    },
    {
        "id": "aefe0952138e6e84",
        "type": "exec",
        "z": "fb38bea55c8dc62c",
        "command": "",
        "addpay": "exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 390,
        "y": 40,
        "wires": [
            [
                "ba6b06c9df74954b"
            ],
            [],
            []
        ]
    },
    {
        "id": "ba6b06c9df74954b",
        "type": "function",
        "z": "fb38bea55c8dc62c",
        "name": "df-parse",
        "func": "const limitSize = env.get(\"limitSize\")\nconst regex = /.*\\s+([0-9]+)\\s+([0-9]+)\\s+([0-9]+)\\s+([0-9]+)%.*/\nconst match = msg.payload.match(regex)\nif (match) {\n    msg.df = {\n        match: match,\n        size: Number(match[1]),\n        used: Number(match[2]),\n        available: Number(match[3]),\n        usePer: Number(match[4])\n    }\n    \n    if (msg.df.available > limitSize) {\n        const status = {\n            fill: \"green\", shape: \"dot\", text: `usePer: ${msg.df.usePer}% (${msg.df.available} > ${limitSize})` }\n        node.status(status)\n        return [msg, null];\n    } else {\n        const status = { \n            fill: \"red\", shape: \"dot\", text: `usePer: ${msg.df.usePer}% (${msg.df.available} > ${limitSize})` }\n        node.status(status)\n        return [null, msg];\n    }\n    \n}\n\nmsg.payload = msg._payload\nmsg._payload = null\n\n\nreturn [null,msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 40,
        "wires": [
            [],
            [
                "f14edd24dcdf7f17"
            ]
        ]
    },
    {
        "id": "f14edd24dcdf7f17",
        "type": "switch",
        "z": "fb38bea55c8dc62c",
        "name": "isWait",
        "property": "wait",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 140,
        "wires": [
            [
                "6d1591ede8985f3d"
            ],
            []
        ]
    },
    {
        "id": "6d1591ede8985f3d",
        "type": "delay",
        "z": "fb38bea55c8dc62c",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 220,
        "y": 80,
        "wires": [
            [
                "aefe0952138e6e84"
            ]
        ]
    },
    {
        "id": "161e3e352b026761",
        "type": "status",
        "z": "fb38bea55c8dc62c",
        "name": "",
        "scope": null,
        "x": 430,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "f7c639a74fb85c05",
        "type": "subflow:7e1bc880aa606898",
        "z": "974ea964a47943fe",
        "name": "",
        "env": [
            {
                "name": "targetKeyPath",
                "value": "targetKeyPath",
                "type": "env"
            },
            {
                "name": "basePath",
                "value": "basePath",
                "type": "env"
            }
        ],
        "x": 160,
        "y": 80,
        "wires": [
            [
                "9c960505583c108f"
            ],
            [],
            []
        ]
    },
    {
        "id": "9c960505583c108f",
        "type": "function",
        "z": "974ea964a47943fe",
        "name": "generate_cmd",
        "func": "const targetKeyPath = env.get(\"targetKeyPath\")\nconst target = RED.util.getPropByPath(msg, targetKeyPath)\n\nconst basePath = env.get(\"basePath\")\nconst targetpath = path.join(basePath, target)\nmsg.targetpath = targetpath\nmsg.exec = `rm -R ${targetpath }`\nmsg._payload = msg.payload\n\nconst status = { fill: \"green\", shape: \"dot\", text: `rm: ${targetpath}` }\nnode.status(status)\nmsg[`${node.name}-${node.id}`] = {\n    id: node.id,\n    name: node.name,\n    exec: msg.exec,\n    status: status\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 340,
        "y": 40,
        "wires": [
            [
                "8b14301da207b917"
            ]
        ]
    },
    {
        "id": "8b14301da207b917",
        "type": "exec",
        "z": "974ea964a47943fe",
        "command": "",
        "addpay": "exec",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "rm",
        "x": 550,
        "y": 40,
        "wires": [
            [],
            [],
            [
                "1b9cccfd8c2489f1"
            ]
        ]
    },
    {
        "id": "1b9cccfd8c2489f1",
        "type": "function",
        "z": "974ea964a47943fe",
        "name": "status更新",
        "func": "if (msg.payload){\n    msg.payload = msg._payload\n    msg._payload = null\n    const status = { fill: \"green\", shape: \"dot\", text: `deleted: ${msg.targetpath}` }\n    node.status(status)\n    return [msg,null]\n} else {\n    msg.payload = msg._payload\n    msg._payload = null\n    const status = { fill: \"red\", shape: \"dot\", text: `error: ${msg.targetpath}` }\n    node.status(status)\n    return [null,msg]\n\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 100,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "396a04d644c222e2",
        "type": "status",
        "z": "974ea964a47943fe",
        "name": "",
        "scope": null,
        "x": 710,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d46c41bb4e879473",
        "type": "exec",
        "z": "df2ab3479f1af30a",
        "command": "ls",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "sample",
        "x": 360,
        "y": 220,
        "wires": [
            [
                "b4b4337bfcc87233"
            ],
            [],
            [
                "b92a4cdb5011b47e"
            ]
        ]
    },
    {
        "id": "18ef00f75503e09c",
        "type": "subflow:56d4506243eb3bc8",
        "z": "df2ab3479f1af30a",
        "name": "",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "d46c41bb4e879473",
                "6a3916660ae36eaa"
            ],
            []
        ]
    },
    {
        "id": "b92a4cdb5011b47e",
        "type": "subflow:a054d80f86a78547",
        "z": "df2ab3479f1af30a",
        "name": "",
        "env": [
            {
                "name": "callback_key",
                "value": "payload.callbackhost",
                "type": "str"
            }
        ],
        "x": 600,
        "y": 260,
        "wires": [
            [
                "6776d12a2ebbf75c"
            ],
            []
        ]
    },
    {
        "id": "f3b39ceaabfc583c",
        "type": "inject",
        "z": "df2ab3479f1af30a",
        "name": "Sample Topic1",
        "props": [
            {
                "p": "payload.topic",
                "v": "{\t    \"topic\" : \"topic1\",\t    \"param\": {\t        \"hoge\": \"new\",\t        \"jobsession\": $millis()\t        }\t}\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 400,
        "wires": [
            [
                "e1450f76bed686ad"
            ]
        ]
    },
    {
        "id": "626247b18fb2289b",
        "type": "subflow:375ee1d6cf6e3891",
        "z": "df2ab3479f1af30a",
        "name": "",
        "x": 560,
        "y": 400,
        "wires": [
            [
                "746d5d124bfb973e"
            ],
            [
                "746d5d124bfb973e"
            ],
            []
        ]
    },
    {
        "id": "b4b4337bfcc87233",
        "type": "subflow:cd185f8f533e0f2d",
        "z": "df2ab3479f1af30a",
        "name": "",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "3532a4502f4685c9"
            ]
        ]
    },
    {
        "id": "6776d12a2ebbf75c",
        "type": "subflow:cd185f8f533e0f2d",
        "z": "df2ab3479f1af30a",
        "name": "",
        "x": 830,
        "y": 260,
        "wires": [
            [
                "3532a4502f4685c9"
            ]
        ]
    },
    {
        "id": "746d5d124bfb973e",
        "type": "subflow:cd185f8f533e0f2d",
        "z": "df2ab3479f1af30a",
        "name": "",
        "env": [
            {
                "name": "outputMsgObject",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 750,
        "y": 400,
        "wires": [
            [
                "d0e39c04e1684a28"
            ]
        ]
    },
    {
        "id": "3532a4502f4685c9",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 220,
        "wires": []
    },
    {
        "id": "81fdb8dcd847065f",
        "type": "subflow:45018afdb676ae24",
        "z": "df2ab3479f1af30a",
        "name": "task exec",
        "x": 840,
        "y": 120,
        "wires": [
            [
                "2fc79c975fef23fe"
            ],
            [
                "b0ca525d34e75e9a"
            ],
            [
                "b0ca525d34e75e9a"
            ]
        ]
    },
    {
        "id": "cc40cdb88793ad37",
        "type": "inject",
        "z": "df2ab3479f1af30a",
        "name": "",
        "props": [
            {
                "p": "topicName",
                "v": "topic",
                "vt": "str"
            },
            {
                "p": "payload.list",
                "v": "[\"A0000_0000\",\"B0000_0000\"]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "a345e33e54e20d4f"
            ]
        ]
    },
    {
        "id": "2fc79c975fef23fe",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 100,
        "wires": []
    },
    {
        "id": "a345e33e54e20d4f",
        "type": "subflow:2af088b891412a7f",
        "z": "df2ab3479f1af30a",
        "name": "",
        "x": 240,
        "y": 120,
        "wires": [
            [
                "1c2685b3f1cef524",
                "135259bd6e32db6a"
            ]
        ]
    },
    {
        "id": "1c2685b3f1cef524",
        "type": "subflow:28b838dd0d60646d",
        "z": "df2ab3479f1af30a",
        "name": "",
        "x": 420,
        "y": 120,
        "wires": [
            [
                "91d58df5e1eb6da2",
                "0cfbff976e5038a1"
            ]
        ]
    },
    {
        "id": "b0ca525d34e75e9a",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 140,
        "wires": []
    },
    {
        "id": "4d65cd8951821aec",
        "type": "comment",
        "z": "df2ab3479f1af30a",
        "name": "お試し実行用",
        "info": "",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "6a3916660ae36eaa",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 300,
        "wires": []
    },
    {
        "id": "e1450f76bed686ad",
        "type": "subflow:28b838dd0d60646d",
        "z": "df2ab3479f1af30a",
        "name": "",
        "env": [
            {
                "name": "jobsessionPath",
                "value": "payload.topic.param.jobsession",
                "type": "str"
            }
        ],
        "x": 360,
        "y": 400,
        "wires": [
            [
                "626247b18fb2289b"
            ]
        ]
    },
    {
        "id": "2a0de9998d7598e4",
        "type": "inject",
        "z": "df2ab3479f1af30a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "package.json",
        "payloadType": "str",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "e56b1e23024302f7"
            ]
        ]
    },
    {
        "id": "a982b15583aae501",
        "type": "comment",
        "z": "df2ab3479f1af30a",
        "name": "処理本体",
        "info": "",
        "x": 100,
        "y": 180,
        "wires": []
    },
    {
        "id": "5b510c9ce657f7f5",
        "type": "comment",
        "z": "df2ab3479f1af30a",
        "name": "JOBcontrollerにtopicの登録",
        "info": "",
        "x": 150,
        "y": 360,
        "wires": []
    },
    {
        "id": "d0e39c04e1684a28",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 400,
        "wires": []
    },
    {
        "id": "e56b1e23024302f7",
        "type": "subflow:7e1bc880aa606898",
        "z": "df2ab3479f1af30a",
        "name": "",
        "env": [
            {
                "name": "basePath",
                "value": "/data",
                "type": "str"
            }
        ],
        "x": 340,
        "y": 500,
        "wires": [
            [
                "daebeebe1b9ddbb3"
            ],
            [
                "ce0c705328fba68c"
            ],
            [
                "930aba0af7454893"
            ]
        ]
    },
    {
        "id": "daebeebe1b9ddbb3",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 480,
        "wires": []
    },
    {
        "id": "ce0c705328fba68c",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "not found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 520,
        "wires": []
    },
    {
        "id": "930aba0af7454893",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 560,
        "wires": []
    },
    {
        "id": "772b7f4a48a4a706",
        "type": "inject",
        "z": "df2ab3479f1af30a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "/data/",
        "payloadType": "str",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "a73297dba7c1e057"
            ]
        ]
    },
    {
        "id": "0410e76b58dd387e",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 620,
        "wires": []
    },
    {
        "id": "7b3fb522c1bb306b",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 660,
        "wires": []
    },
    {
        "id": "a73297dba7c1e057",
        "type": "subflow:fb38bea55c8dc62c",
        "z": "df2ab3479f1af30a",
        "name": "",
        "x": 340,
        "y": 640,
        "wires": [
            [
                "0410e76b58dd387e"
            ],
            [
                "7b3fb522c1bb306b"
            ]
        ]
    },
    {
        "id": "c1eff2029685b118",
        "type": "inject",
        "z": "df2ab3479f1af30a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "fuga.json",
        "payloadType": "str",
        "x": 120,
        "y": 740,
        "wires": [
            [
                "6691746e36245a78"
            ]
        ]
    },
    {
        "id": "fbf8422bc8cc93d1",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "success",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 720,
        "wires": []
    },
    {
        "id": "f0ae25dd6142cc53",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "not found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 760,
        "wires": []
    },
    {
        "id": "c2d1d999ccc77b68",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 800,
        "wires": []
    },
    {
        "id": "6691746e36245a78",
        "type": "subflow:974ea964a47943fe",
        "z": "df2ab3479f1af30a",
        "name": "",
        "env": [
            {
                "name": "targetKeyPath",
                "value": "payload",
                "type": "str"
            },
            {
                "name": "basePath",
                "value": "/data",
                "type": "str"
            }
        ],
        "x": 340,
        "y": 740,
        "wires": [
            [
                "fbf8422bc8cc93d1"
            ],
            [
                "f0ae25dd6142cc53"
            ],
            [
                "c2d1d999ccc77b68"
            ],
            [
                "2c8b969635fc13ac"
            ]
        ]
    },
    {
        "id": "2c8b969635fc13ac",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 840,
        "wires": []
    },
    {
        "id": "8e928aca2d2c53c8",
        "type": "file",
        "z": "df2ab3479f1af30a",
        "name": "",
        "filename": "/data/fuga.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 360,
        "y": 880,
        "wires": [
            [
                "057f68a96810ac99"
            ]
        ]
    },
    {
        "id": "e067482774b93215",
        "type": "inject",
        "z": "df2ab3479f1af30a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 880,
        "wires": [
            [
                "8e928aca2d2c53c8"
            ]
        ]
    },
    {
        "id": "057f68a96810ac99",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 880,
        "wires": []
    },
    {
        "id": "91d58df5e1eb6da2",
        "type": "function",
        "z": "df2ab3479f1af30a",
        "name": "set-topic",
        "func": "const topic = msg.topicName\nconst retmsg = RED.util.setPropByPath(msg, \"topicTicket.topic\", topic)\n\nreturn retmsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 120,
        "wires": [
            [
                "81fdb8dcd847065f",
                "f43a6e33e23e1ffa"
            ]
        ]
    },
    {
        "id": "a88ab695f3fe68d7",
        "type": "inject",
        "z": "df2ab3479f1af30a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 940,
        "wires": [
            [
                "ad66cbfef63810f6"
            ]
        ]
    },
    {
        "id": "ad66cbfef63810f6",
        "type": "subflow:28b838dd0d60646d",
        "z": "df2ab3479f1af30a",
        "name": "",
        "x": 360,
        "y": 940,
        "wires": [
            [
                "eb2493e92030b3a0"
            ]
        ]
    },
    {
        "id": "eb2493e92030b3a0",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 940,
        "wires": []
    },
    {
        "id": "135259bd6e32db6a",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 60,
        "wires": []
    },
    {
        "id": "0cfbff976e5038a1",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 60,
        "wires": []
    },
    {
        "id": "f43a6e33e23e1ffa",
        "type": "debug",
        "z": "df2ab3479f1af30a",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 60,
        "wires": []
    }
]