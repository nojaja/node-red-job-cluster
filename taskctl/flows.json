[
    {
        "id": "df2ab3479f1af30a",
        "type": "tab",
        "label": "フロー 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "56d4506243eb3bc8",
        "type": "subflow",
        "name": "job-start-endpoint",
        "info": "",
        "category": "job",
        "in": [],
        "out": [
            {
                "x": 680,
                "y": 220,
                "wires": [
                    {
                        "id": "cd1ed3ded782cc75",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "actionType",
                "type": "str",
                "value": "exec"
            },
            {
                "name": "endpoint",
                "type": "env",
                "value": "/${actionType}/:topicTicket",
                "ui": {
                    "type": "hide"
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-start-endpoint",
            "type": "job-cluster-start-endpoint",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/inject.svg"
    },
    {
        "id": "a054d80f86a78547",
        "type": "subflow",
        "name": "job-end-callback",
        "info": "",
        "category": "job",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "c36d55d859478eea"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 40,
                "wires": [
                    {
                        "id": "9cdc11e8a03bb722",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicTicket_key",
                "type": "str",
                "value": "topicTicket"
            },
            {
                "name": "callbackPath",
                "type": "str",
                "value": "callbackhost"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-end-callback",
            "type": "job-cluster-end-callback",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "cd185f8f533e0f2d",
        "type": "subflow",
        "name": "logger",
        "info": "サイドバーの「デバッグ」タブに、選択したメッセージプロパティの値を表示します。\r\n設定により、ランタイムログへの出力も可能です。\r\nデフォルトの表示対象は`msg.payload`ですが、設定により、指定したプロパティ、メッセージ全体、もしくは、JSONata式の評価結果を出力できます。\r\n\r\n## 詳細\r\n「デバッグ」サイドバーは受け取ったメッセージの階層構造を表示する機能を備えます。この機能によりメッセージの構造を容易に理解できます。\r\n\r\nJavaScriptオブジェクトと配列は必要に応じて折り畳んだり展開したりできます。バッファオブジェクトを生データとして表示したり、表現可能な場合に文字列として表示したりすることも可能です。\r\n\r\nメッセージを受信した時刻、送信ノード、メッセージの型に関する情報を「デバッグ」サイドバーに表示されたメッセージに付随して表示します。送信元ノードのIDを選択すると、ワークスペース内の対応ノードを確認できます。\r\n\r\n出力の有効/無効はノード上のボタンで切り替えられます。フロー上で未使用のdebugノードは、無効化するか削除することを推奨します。\r\n\r\n全てのメッセージをランタイムログに送付、もしくは、(32文字の)短いデータをdebugノードの下のステータステキストに表示することも可能です。",
        "category": "job",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "546cf87e3978c6e6"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "logLevel",
                "type": "str",
                "value": "info"
            },
            {
                "name": "logName",
                "type": "str",
                "value": "system"
            },
            {
                "name": "logPath",
                "type": "env",
                "value": "LOGPATH"
            },
            {
                "name": "removeColor",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "outputMsgObject",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "ja": "オブジェクト全体"
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-logger",
            "type": "job-cluster-logger",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#87A980",
        "icon": "node-red/file-out.svg"
    },
    {
        "id": "375ee1d6cf6e3891",
        "type": "subflow",
        "name": "addtopic",
        "info": "\r\n## jobctlにtopicを登録します。\r\n\r\n## データ構造\r\n```\r\n{\r\n    \"topic\" : \"topic-name\",\r\n    \"param\": {\r\n        \"paramA\": \"A\",\r\n        \"paramB\": \"B\",\r\n        \"jobsession\": $millis()\r\n        }\r\n}\r\n```",
        "category": "job",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "a72d2803344a446d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 40,
                "wires": [
                    {
                        "id": "ab5c9b3893934684",
                        "port": 0
                    }
                ]
            },
            {
                "x": 850,
                "y": 100,
                "wires": [
                    {
                        "id": "ab5c9b3893934684",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicTicketPath",
                "type": "str",
                "value": "payload.topic"
            },
            {
                "name": "endpointport",
                "type": "str",
                "value": "1888"
            }
        ],
        "meta": {
            "module": "node-red-contrib-job-cluster-addtopic",
            "type": "job-cluster-addtopic",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "inputLabels": [
            "topic"
        ],
        "outputLabels": [
            "Success",
            "Failed"
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "1f64b61d5f2b2af5",
        "type": "http in",
        "z": "56d4506243eb3bc8",
        "name": "",
        "url": "${endpoint}",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "99ad089b91cf6c3b"
            ]
        ]
    },
    {
        "id": "99ad089b91cf6c3b",
        "type": "change",
        "z": "56d4506243eb3bc8",
        "name": "set parameter",
        "rules": [
            {
                "t": "set",
                "p": "topicTicket",
                "pt": "msg",
                "to": "req.params.topicTicket",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "callbackhost",
                "pt": "msg",
                "to": "req.headers.x-callback",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 160,
        "wires": [
            [
                "cd1ed3ded782cc75"
            ]
        ]
    },
    {
        "id": "413a1b0b82f06f08",
        "type": "http response",
        "z": "56d4506243eb3bc8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 960,
        "y": 160,
        "wires": []
    },
    {
        "id": "8b8aaab557a380be",
        "type": "function",
        "z": "56d4506243eb3bc8",
        "name": "assing result",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topicTicket\": msg.topicTicket,\n    \"callbackhost\": msg.callbackhost\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 160,
        "wires": [
            [
                "413a1b0b82f06f08"
            ]
        ]
    },
    {
        "id": "cd1ed3ded782cc75",
        "type": "function",
        "z": "56d4506243eb3bc8",
        "name": "JSON.parse",
        "func": "if (msg.topicTicket) {\n    try {\n        msg.topicTicket = JSON.parse(msg.topicTicket)\n    } catch (error) {\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 160,
        "wires": [
            [
                "8b8aaab557a380be"
            ]
        ]
    },
    {
        "id": "c36d55d859478eea",
        "type": "function",
        "z": "a054d80f86a78547",
        "name": "generate_url",
        "func": "\nconst callbackPath = env.get(\"callbackPath\")\n\nconst callbackhost = RED.util.getPropByPath(msg, callbackPath)\n\nmsg.callbackhost = callbackhost\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 40,
        "wires": [
            [
                "9cdc11e8a03bb722"
            ]
        ]
    },
    {
        "id": "9cdc11e8a03bb722",
        "type": "http request",
        "z": "a054d80f86a78547",
        "name": "callback",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{callbackhost}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "8b05743651ac39ce",
        "type": "function",
        "z": "cd185f8f533e0f2d",
        "name": "logger_proc",
        "func": "//const uid_key = env.get(\"logUID_Key\")\n//const uid = msg[uid_key] || msg._msgid\nconst date = new Date()\nconst uid = date.getFullYear() + (\"0\" + (date.getMonth() + 1)).slice(-2) + (\"0\" + (date.getDate() + 1)).slice(-2)\n\nconst logLevel = env.get(\"logLevel\")\nconst logName = env.get(\"logName\")\nconst logPath = env.get(\"logPath\")\nconst filename = `${logName}${logLevel}.log`\nmsg.logFilePath = path.join(logPath, uid, filename)\n\nconst outputMsgObject = env.get(\"outputMsgObject\")\nif (outputMsgObject) {\n    msg.payload = JSON.stringify(msg);\n    msg.consoleout = msg\n} else {\n    msg.consoleout = msg.payload\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 570,
        "y": 60,
        "wires": [
            [
                "5dfac259ecc0927f",
                "7e0a41b86051ec87"
            ]
        ]
    },
    {
        "id": "5dfac259ecc0927f",
        "type": "file",
        "z": "cd185f8f533e0f2d",
        "name": "logout",
        "filename": "logFilePath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 790,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "7e0a41b86051ec87",
        "type": "debug",
        "z": "cd185f8f533e0f2d",
        "name": "${logName}",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "consoleout",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 100,
        "wires": []
    },
    {
        "id": "4b21eb6d96357c05",
        "type": "function",
        "z": "cd185f8f533e0f2d",
        "name": "remove Color",
        "func": "const regex = /\\x1b[[0-9;]*m/g\nconst buf = (typeof msg.payload === 'object') ? msg.payload.toString() : msg.payload\nmsg.payload = buf.replace(regex, '')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "8b05743651ac39ce"
            ]
        ]
    },
    {
        "id": "546cf87e3978c6e6",
        "type": "switch",
        "z": "cd185f8f533e0f2d",
        "name": "",
        "property": "removeColor",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 60,
        "wires": [
            [
                "4b21eb6d96357c05"
            ],
            [
                "8b05743651ac39ce"
            ]
        ]
    },
    {
        "id": "a72d2803344a446d",
        "type": "function",
        "z": "375ee1d6cf6e3891",
        "name": "generate_url",
        "func": "const endpointport = env.get(\"endpointport\")\n\nconst topicTicketPath = env.get(\"topicTicketPath\")\nconst topicTicket = encodeURIComponent(JSON.stringify(RED.util.getPropByPath(msg, topicTicketPath)))\n\nmsg.joburl = `http://localhost:${endpointport}/addtopic/${topicTicket}`\nmsg.topic = topicTicket\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "fc01a190e21bcf85"
            ]
        ]
    },
    {
        "id": "fc01a190e21bcf85",
        "type": "http request",
        "z": "375ee1d6cf6e3891",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{joburl}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-topic",
                "valueType": "msg",
                "valueValue": "topic"
            }
        ],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "ab5c9b3893934684"
            ]
        ]
    },
    {
        "id": "ab5c9b3893934684",
        "type": "function",
        "z": "375ee1d6cf6e3891",
        "name": "JSON.parse",
        "func": "if (msg.statusCode == \"200\") {\n    if (msg.payload) {\n        try {\n            msg.payload = JSON.parse(msg.payload)\n        } catch (error) {\n        }\n    }\n    return [msg, null]\n}else{\n\n}\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "0d530480be6a63b9",
        "type": "inject",
        "z": "df2ab3479f1af30a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "d46c41bb4e879473"
            ]
        ]
    },
    {
        "id": "d46c41bb4e879473",
        "type": "exec",
        "z": "df2ab3479f1af30a",
        "command": "node /data/modules/sample/index.bundle.js",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "sample",
        "x": 360,
        "y": 100,
        "wires": [
            [
                "b4b4337bfcc87233"
            ],
            [],
            [
                "b92a4cdb5011b47e"
            ]
        ]
    },
    {
        "id": "18ef00f75503e09c",
        "type": "subflow:56d4506243eb3bc8",
        "z": "df2ab3479f1af30a",
        "name": "",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "d46c41bb4e879473"
            ]
        ]
    },
    {
        "id": "b92a4cdb5011b47e",
        "type": "subflow:a054d80f86a78547",
        "z": "df2ab3479f1af30a",
        "name": "",
        "env": [
            {
                "name": "callback_key",
                "value": "payload.callbackhost",
                "type": "str"
            }
        ],
        "x": 580,
        "y": 180,
        "wires": [
            [
                "6776d12a2ebbf75c"
            ]
        ]
    },
    {
        "id": "f3b39ceaabfc583c",
        "type": "inject",
        "z": "df2ab3479f1af30a",
        "name": "Sample Topic1",
        "props": [
            {
                "p": "payload.topic",
                "v": "{\t    \"topic\" : \"topic1\",\t    \"param\": {\t        \"hoge\": \"new\",\t        \"jobsession\": $millis()\t        }\t}\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 280,
        "wires": [
            [
                "626247b18fb2289b"
            ]
        ]
    },
    {
        "id": "626247b18fb2289b",
        "type": "subflow:375ee1d6cf6e3891",
        "z": "df2ab3479f1af30a",
        "name": "",
        "x": 520,
        "y": 280,
        "wires": [
            [
                "746d5d124bfb973e"
            ],
            [
                "746d5d124bfb973e"
            ]
        ]
    },
    {
        "id": "b4b4337bfcc87233",
        "type": "subflow:cd185f8f533e0f2d",
        "z": "df2ab3479f1af30a",
        "name": "",
        "x": 550,
        "y": 80,
        "wires": []
    },
    {
        "id": "6776d12a2ebbf75c",
        "type": "subflow:cd185f8f533e0f2d",
        "z": "df2ab3479f1af30a",
        "name": "",
        "x": 750,
        "y": 180,
        "wires": []
    },
    {
        "id": "746d5d124bfb973e",
        "type": "subflow:cd185f8f533e0f2d",
        "z": "df2ab3479f1af30a",
        "name": "",
        "env": [
            {
                "name": "outputMsgObject",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 770,
        "y": 280,
        "wires": []
    }
]